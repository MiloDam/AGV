
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000180c  000018a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000180c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  000018a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 000001a0  00000000  00000000  000018ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000028c  00000000  00000000  00001a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000026fe  00000000  00000000  00001cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000136b  00000000  00000000  000043d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015e5  00000000  00000000  00005740  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  00006d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004aa  00000000  00000000  00006f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  00007422  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00007cb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e0       	ldi	r30, 0x0C	; 12
      fc:	f8 e1       	ldi	r31, 0x18	; 24
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	0e 94 8d 04 	call	0x91a	; 0x91a <main>
     112:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <construct_stepper>:
    uint8_t pins[4];
    uint16_t steps;
};

void construct_stepper(struct stepper *stepper, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4)
{
     11a:	0f 93       	push	r16
     11c:	df 93       	push	r29
     11e:	cf 93       	push	r28
     120:	00 d0       	rcall	.+0      	; 0x122 <construct_stepper+0x8>
     122:	00 d0       	rcall	.+0      	; 0x124 <construct_stepper+0xa>
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
     128:	9a 83       	std	Y+2, r25	; 0x02
     12a:	89 83       	std	Y+1, r24	; 0x01
     12c:	6b 83       	std	Y+3, r22	; 0x03
     12e:	4c 83       	std	Y+4, r20	; 0x04
     130:	2d 83       	std	Y+5, r18	; 0x05
     132:	0e 83       	std	Y+6, r16	; 0x06
    stepper->speed = 0;
     134:	e9 81       	ldd	r30, Y+1	; 0x01
     136:	fa 81       	ldd	r31, Y+2	; 0x02
     138:	10 82       	st	Z, r1
    stepper->steps = 0;
     13a:	e9 81       	ldd	r30, Y+1	; 0x01
     13c:	fa 81       	ldd	r31, Y+2	; 0x02
     13e:	16 82       	std	Z+6, r1	; 0x06
     140:	15 82       	std	Z+5, r1	; 0x05
    stepper->pins[0] = pin1;
     142:	e9 81       	ldd	r30, Y+1	; 0x01
     144:	fa 81       	ldd	r31, Y+2	; 0x02
     146:	8b 81       	ldd	r24, Y+3	; 0x03
     148:	81 83       	std	Z+1, r24	; 0x01
    stepper->pins[1] = pin2;
     14a:	e9 81       	ldd	r30, Y+1	; 0x01
     14c:	fa 81       	ldd	r31, Y+2	; 0x02
     14e:	8c 81       	ldd	r24, Y+4	; 0x04
     150:	82 83       	std	Z+2, r24	; 0x02
    stepper->pins[2] = pin3;
     152:	e9 81       	ldd	r30, Y+1	; 0x01
     154:	fa 81       	ldd	r31, Y+2	; 0x02
     156:	8d 81       	ldd	r24, Y+5	; 0x05
     158:	83 83       	std	Z+3, r24	; 0x03
    stepper->pins[3] = pin4;
     15a:	e9 81       	ldd	r30, Y+1	; 0x01
     15c:	fa 81       	ldd	r31, Y+2	; 0x02
     15e:	8e 81       	ldd	r24, Y+6	; 0x06
     160:	84 83       	std	Z+4, r24	; 0x04

}
     162:	26 96       	adiw	r28, 0x06	; 6
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	de bf       	out	0x3e, r29	; 62
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	cd bf       	out	0x3d, r28	; 61
     16e:	cf 91       	pop	r28
     170:	df 91       	pop	r29
     172:	0f 91       	pop	r16
     174:	08 95       	ret

00000176 <initialize_steppers>:

void initialize_steppers()
{
     176:	df 93       	push	r29
     178:	cf 93       	push	r28
     17a:	0f 92       	push	r0
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
    DDRC |= 0xFF;//init all pins in bank C
     180:	e7 e2       	ldi	r30, 0x27	; 39
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	e7 e2       	ldi	r30, 0x27	; 39
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	8f ef       	ldi	r24, 0xFF	; 255
     18c:	80 83       	st	Z, r24
}
     18e:	0f 90       	pop	r0
     190:	cf 91       	pop	r28
     192:	df 91       	pop	r29
     194:	08 95       	ret

00000196 <step>:

void step(struct stepper *stepper)
{
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	e4 97       	sbiw	r28, 0x34	; 52
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	9c ab       	std	Y+52, r25	; 0x34
     1ac:	8b ab       	std	Y+51, r24	; 0x33
    stepper->steps++;
     1ae:	eb a9       	ldd	r30, Y+51	; 0x33
     1b0:	fc a9       	ldd	r31, Y+52	; 0x34
     1b2:	85 81       	ldd	r24, Z+5	; 0x05
     1b4:	96 81       	ldd	r25, Z+6	; 0x06
     1b6:	01 96       	adiw	r24, 0x01	; 1
     1b8:	eb a9       	ldd	r30, Y+51	; 0x33
     1ba:	fc a9       	ldd	r31, Y+52	; 0x34
     1bc:	96 83       	std	Z+6, r25	; 0x06
     1be:	85 83       	std	Z+5, r24	; 0x05
    for (int x = 0; x < 4; x++)
     1c0:	1a aa       	std	Y+50, r1	; 0x32
     1c2:	19 aa       	std	Y+49, r1	; 0x31
     1c4:	b6 c1       	rjmp	.+876    	; 0x532 <step+0x39c>
    {
      PORTC |= (1<<stepper->pins[x]);
     1c6:	a8 e2       	ldi	r26, 0x28	; 40
     1c8:	b0 e0       	ldi	r27, 0x00	; 0
     1ca:	e8 e2       	ldi	r30, 0x28	; 40
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	48 2f       	mov	r20, r24
     1d2:	29 a9       	ldd	r18, Y+49	; 0x31
     1d4:	3a a9       	ldd	r19, Y+50	; 0x32
     1d6:	8b a9       	ldd	r24, Y+51	; 0x33
     1d8:	9c a9       	ldd	r25, Y+52	; 0x34
     1da:	82 0f       	add	r24, r18
     1dc:	93 1f       	adc	r25, r19
     1de:	fc 01       	movw	r30, r24
     1e0:	31 96       	adiw	r30, 0x01	; 1
     1e2:	80 81       	ld	r24, Z
     1e4:	28 2f       	mov	r18, r24
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <step+0x5c>
     1ee:	88 0f       	add	r24, r24
     1f0:	99 1f       	adc	r25, r25
     1f2:	2a 95       	dec	r18
     1f4:	e2 f7       	brpl	.-8      	; 0x1ee <step+0x58>
     1f6:	84 2b       	or	r24, r20
     1f8:	8c 93       	st	X, r24
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	a6 e1       	ldi	r26, 0x16	; 22
     200:	b4 e4       	ldi	r27, 0x44	; 68
     202:	8d a7       	std	Y+45, r24	; 0x2d
     204:	9e a7       	std	Y+46, r25	; 0x2e
     206:	af a7       	std	Y+47, r26	; 0x2f
     208:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     20a:	6d a5       	ldd	r22, Y+45	; 0x2d
     20c:	7e a5       	ldd	r23, Y+46	; 0x2e
     20e:	8f a5       	ldd	r24, Y+47	; 0x2f
     210:	98 a9       	ldd	r25, Y+48	; 0x30
     212:	2b ea       	ldi	r18, 0xAB	; 171
     214:	3a ea       	ldi	r19, 0xAA	; 170
     216:	4a ea       	ldi	r20, 0xAA	; 170
     218:	50 e4       	ldi	r21, 0x40	; 64
     21a:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3>
     21e:	dc 01       	movw	r26, r24
     220:	cb 01       	movw	r24, r22
     222:	89 a7       	std	Y+41, r24	; 0x29
     224:	9a a7       	std	Y+42, r25	; 0x2a
     226:	ab a7       	std	Y+43, r26	; 0x2b
     228:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     22a:	69 a5       	ldd	r22, Y+41	; 0x29
     22c:	7a a5       	ldd	r23, Y+42	; 0x2a
     22e:	8b a5       	ldd	r24, Y+43	; 0x2b
     230:	9c a5       	ldd	r25, Y+44	; 0x2c
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	40 e8       	ldi	r20, 0x80	; 128
     238:	5f e3       	ldi	r21, 0x3F	; 63
     23a:	0e 94 81 09 	call	0x1302	; 0x1302 <__ltsf2>
     23e:	88 23       	and	r24, r24
     240:	1c f4       	brge	.+6      	; 0x248 <step+0xb2>
		__ticks = 1;
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	88 a7       	std	Y+40, r24	; 0x28
     246:	91 c0       	rjmp	.+290    	; 0x36a <step+0x1d4>
	else if (__tmp > 255)
     248:	69 a5       	ldd	r22, Y+41	; 0x29
     24a:	7a a5       	ldd	r23, Y+42	; 0x2a
     24c:	8b a5       	ldd	r24, Y+43	; 0x2b
     24e:	9c a5       	ldd	r25, Y+44	; 0x2c
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	4f e7       	ldi	r20, 0x7F	; 127
     256:	53 e4       	ldi	r21, 0x43	; 67
     258:	0e 94 21 09 	call	0x1242	; 0x1242 <__gtsf2>
     25c:	18 16       	cp	r1, r24
     25e:	0c f0       	brlt	.+2      	; 0x262 <step+0xcc>
     260:	7b c0       	rjmp	.+246    	; 0x358 <step+0x1c2>
	{
		_delay_ms(__us / 1000.0);
     262:	6d a5       	ldd	r22, Y+45	; 0x2d
     264:	7e a5       	ldd	r23, Y+46	; 0x2e
     266:	8f a5       	ldd	r24, Y+47	; 0x2f
     268:	98 a9       	ldd	r25, Y+48	; 0x30
     26a:	20 e0       	ldi	r18, 0x00	; 0
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	4a e7       	ldi	r20, 0x7A	; 122
     270:	54 e4       	ldi	r21, 0x44	; 68
     272:	0e 94 75 08 	call	0x10ea	; 0x10ea <__divsf3>
     276:	dc 01       	movw	r26, r24
     278:	cb 01       	movw	r24, r22
     27a:	8c a3       	std	Y+36, r24	; 0x24
     27c:	9d a3       	std	Y+37, r25	; 0x25
     27e:	ae a3       	std	Y+38, r26	; 0x26
     280:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     282:	6c a1       	ldd	r22, Y+36	; 0x24
     284:	7d a1       	ldd	r23, Y+37	; 0x25
     286:	8e a1       	ldd	r24, Y+38	; 0x26
     288:	9f a1       	ldd	r25, Y+39	; 0x27
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	4a e7       	ldi	r20, 0x7A	; 122
     290:	55 e4       	ldi	r21, 0x45	; 69
     292:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3>
     296:	dc 01       	movw	r26, r24
     298:	cb 01       	movw	r24, r22
     29a:	88 a3       	std	Y+32, r24	; 0x20
     29c:	99 a3       	std	Y+33, r25	; 0x21
     29e:	aa a3       	std	Y+34, r26	; 0x22
     2a0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     2a2:	68 a1       	ldd	r22, Y+32	; 0x20
     2a4:	79 a1       	ldd	r23, Y+33	; 0x21
     2a6:	8a a1       	ldd	r24, Y+34	; 0x22
     2a8:	9b a1       	ldd	r25, Y+35	; 0x23
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 e8       	ldi	r20, 0x80	; 128
     2b0:	5f e3       	ldi	r21, 0x3F	; 63
     2b2:	0e 94 81 09 	call	0x1302	; 0x1302 <__ltsf2>
     2b6:	88 23       	and	r24, r24
     2b8:	2c f4       	brge	.+10     	; 0x2c4 <step+0x12e>
		__ticks = 1;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	9f 8f       	std	Y+31, r25	; 0x1f
     2c0:	8e 8f       	std	Y+30, r24	; 0x1e
     2c2:	3f c0       	rjmp	.+126    	; 0x342 <step+0x1ac>
	else if (__tmp > 65535)
     2c4:	68 a1       	ldd	r22, Y+32	; 0x20
     2c6:	79 a1       	ldd	r23, Y+33	; 0x21
     2c8:	8a a1       	ldd	r24, Y+34	; 0x22
     2ca:	9b a1       	ldd	r25, Y+35	; 0x23
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	3f ef       	ldi	r19, 0xFF	; 255
     2d0:	4f e7       	ldi	r20, 0x7F	; 127
     2d2:	57 e4       	ldi	r21, 0x47	; 71
     2d4:	0e 94 21 09 	call	0x1242	; 0x1242 <__gtsf2>
     2d8:	18 16       	cp	r1, r24
     2da:	4c f5       	brge	.+82     	; 0x32e <step+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2dc:	6c a1       	ldd	r22, Y+36	; 0x24
     2de:	7d a1       	ldd	r23, Y+37	; 0x25
     2e0:	8e a1       	ldd	r24, Y+38	; 0x26
     2e2:	9f a1       	ldd	r25, Y+39	; 0x27
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	40 e2       	ldi	r20, 0x20	; 32
     2ea:	51 e4       	ldi	r21, 0x41	; 65
     2ec:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3>
     2f0:	dc 01       	movw	r26, r24
     2f2:	cb 01       	movw	r24, r22
     2f4:	bc 01       	movw	r22, r24
     2f6:	cd 01       	movw	r24, r26
     2f8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixunssfsi>
     2fc:	dc 01       	movw	r26, r24
     2fe:	cb 01       	movw	r24, r22
     300:	9f 8f       	std	Y+31, r25	; 0x1f
     302:	8e 8f       	std	Y+30, r24	; 0x1e
     304:	0f c0       	rjmp	.+30     	; 0x324 <step+0x18e>
     306:	80 e9       	ldi	r24, 0x90	; 144
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	9d 8f       	std	Y+29, r25	; 0x1d
     30c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     30e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     310:	9d 8d       	ldd	r25, Y+29	; 0x1d
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <step+0x17c>
     316:	9d 8f       	std	Y+29, r25	; 0x1d
     318:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     31a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     31c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	9f 8f       	std	Y+31, r25	; 0x1f
     322:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     324:	8e 8d       	ldd	r24, Y+30	; 0x1e
     326:	9f 8d       	ldd	r25, Y+31	; 0x1f
     328:	00 97       	sbiw	r24, 0x00	; 0
     32a:	69 f7       	brne	.-38     	; 0x306 <step+0x170>
     32c:	24 c0       	rjmp	.+72     	; 0x376 <step+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     32e:	68 a1       	ldd	r22, Y+32	; 0x20
     330:	79 a1       	ldd	r23, Y+33	; 0x21
     332:	8a a1       	ldd	r24, Y+34	; 0x22
     334:	9b a1       	ldd	r25, Y+35	; 0x23
     336:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixunssfsi>
     33a:	dc 01       	movw	r26, r24
     33c:	cb 01       	movw	r24, r22
     33e:	9f 8f       	std	Y+31, r25	; 0x1f
     340:	8e 8f       	std	Y+30, r24	; 0x1e
     342:	8e 8d       	ldd	r24, Y+30	; 0x1e
     344:	9f 8d       	ldd	r25, Y+31	; 0x1f
     346:	9b 8f       	std	Y+27, r25	; 0x1b
     348:	8a 8f       	std	Y+26, r24	; 0x1a
     34a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     34c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <step+0x1b8>
     352:	9b 8f       	std	Y+27, r25	; 0x1b
     354:	8a 8f       	std	Y+26, r24	; 0x1a
     356:	0f c0       	rjmp	.+30     	; 0x376 <step+0x1e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     358:	69 a5       	ldd	r22, Y+41	; 0x29
     35a:	7a a5       	ldd	r23, Y+42	; 0x2a
     35c:	8b a5       	ldd	r24, Y+43	; 0x2b
     35e:	9c a5       	ldd	r25, Y+44	; 0x2c
     360:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixunssfsi>
     364:	dc 01       	movw	r26, r24
     366:	cb 01       	movw	r24, r22
     368:	88 a7       	std	Y+40, r24	; 0x28
     36a:	88 a5       	ldd	r24, Y+40	; 0x28
     36c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     36e:	89 8d       	ldd	r24, Y+25	; 0x19
     370:	8a 95       	dec	r24
     372:	f1 f7       	brne	.-4      	; 0x370 <step+0x1da>
     374:	89 8f       	std	Y+25, r24	; 0x19
      _delay_us(600);
      PORTC &= ~(1<<stepper->pins[x]);
     376:	a8 e2       	ldi	r26, 0x28	; 40
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	e8 e2       	ldi	r30, 0x28	; 40
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	48 2f       	mov	r20, r24
     382:	29 a9       	ldd	r18, Y+49	; 0x31
     384:	3a a9       	ldd	r19, Y+50	; 0x32
     386:	8b a9       	ldd	r24, Y+51	; 0x33
     388:	9c a9       	ldd	r25, Y+52	; 0x34
     38a:	82 0f       	add	r24, r18
     38c:	93 1f       	adc	r25, r19
     38e:	fc 01       	movw	r30, r24
     390:	31 96       	adiw	r30, 0x01	; 1
     392:	80 81       	ld	r24, Z
     394:	28 2f       	mov	r18, r24
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <step+0x20c>
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	2a 95       	dec	r18
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <step+0x208>
     3a6:	80 95       	com	r24
     3a8:	84 23       	and	r24, r20
     3aa:	8c 93       	st	X, r24
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	a6 e1       	ldi	r26, 0x16	; 22
     3b2:	b4 e4       	ldi	r27, 0x44	; 68
     3b4:	8d 8b       	std	Y+21, r24	; 0x15
     3b6:	9e 8b       	std	Y+22, r25	; 0x16
     3b8:	af 8b       	std	Y+23, r26	; 0x17
     3ba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     3bc:	6d 89       	ldd	r22, Y+21	; 0x15
     3be:	7e 89       	ldd	r23, Y+22	; 0x16
     3c0:	8f 89       	ldd	r24, Y+23	; 0x17
     3c2:	98 8d       	ldd	r25, Y+24	; 0x18
     3c4:	2b ea       	ldi	r18, 0xAB	; 171
     3c6:	3a ea       	ldi	r19, 0xAA	; 170
     3c8:	4a ea       	ldi	r20, 0xAA	; 170
     3ca:	50 e4       	ldi	r21, 0x40	; 64
     3cc:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3>
     3d0:	dc 01       	movw	r26, r24
     3d2:	cb 01       	movw	r24, r22
     3d4:	89 8b       	std	Y+17, r24	; 0x11
     3d6:	9a 8b       	std	Y+18, r25	; 0x12
     3d8:	ab 8b       	std	Y+19, r26	; 0x13
     3da:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     3dc:	69 89       	ldd	r22, Y+17	; 0x11
     3de:	7a 89       	ldd	r23, Y+18	; 0x12
     3e0:	8b 89       	ldd	r24, Y+19	; 0x13
     3e2:	9c 89       	ldd	r25, Y+20	; 0x14
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	40 e8       	ldi	r20, 0x80	; 128
     3ea:	5f e3       	ldi	r21, 0x3F	; 63
     3ec:	0e 94 81 09 	call	0x1302	; 0x1302 <__ltsf2>
     3f0:	88 23       	and	r24, r24
     3f2:	1c f4       	brge	.+6      	; 0x3fa <step+0x264>
		__ticks = 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	88 8b       	std	Y+16, r24	; 0x10
     3f8:	91 c0       	rjmp	.+290    	; 0x51c <step+0x386>
	else if (__tmp > 255)
     3fa:	69 89       	ldd	r22, Y+17	; 0x11
     3fc:	7a 89       	ldd	r23, Y+18	; 0x12
     3fe:	8b 89       	ldd	r24, Y+19	; 0x13
     400:	9c 89       	ldd	r25, Y+20	; 0x14
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	4f e7       	ldi	r20, 0x7F	; 127
     408:	53 e4       	ldi	r21, 0x43	; 67
     40a:	0e 94 21 09 	call	0x1242	; 0x1242 <__gtsf2>
     40e:	18 16       	cp	r1, r24
     410:	0c f0       	brlt	.+2      	; 0x414 <step+0x27e>
     412:	7b c0       	rjmp	.+246    	; 0x50a <step+0x374>
	{
		_delay_ms(__us / 1000.0);
     414:	6d 89       	ldd	r22, Y+21	; 0x15
     416:	7e 89       	ldd	r23, Y+22	; 0x16
     418:	8f 89       	ldd	r24, Y+23	; 0x17
     41a:	98 8d       	ldd	r25, Y+24	; 0x18
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	4a e7       	ldi	r20, 0x7A	; 122
     422:	54 e4       	ldi	r21, 0x44	; 68
     424:	0e 94 75 08 	call	0x10ea	; 0x10ea <__divsf3>
     428:	dc 01       	movw	r26, r24
     42a:	cb 01       	movw	r24, r22
     42c:	8c 87       	std	Y+12, r24	; 0x0c
     42e:	9d 87       	std	Y+13, r25	; 0x0d
     430:	ae 87       	std	Y+14, r26	; 0x0e
     432:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     434:	6c 85       	ldd	r22, Y+12	; 0x0c
     436:	7d 85       	ldd	r23, Y+13	; 0x0d
     438:	8e 85       	ldd	r24, Y+14	; 0x0e
     43a:	9f 85       	ldd	r25, Y+15	; 0x0f
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	4a e7       	ldi	r20, 0x7A	; 122
     442:	55 e4       	ldi	r21, 0x45	; 69
     444:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3>
     448:	dc 01       	movw	r26, r24
     44a:	cb 01       	movw	r24, r22
     44c:	88 87       	std	Y+8, r24	; 0x08
     44e:	99 87       	std	Y+9, r25	; 0x09
     450:	aa 87       	std	Y+10, r26	; 0x0a
     452:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     454:	68 85       	ldd	r22, Y+8	; 0x08
     456:	79 85       	ldd	r23, Y+9	; 0x09
     458:	8a 85       	ldd	r24, Y+10	; 0x0a
     45a:	9b 85       	ldd	r25, Y+11	; 0x0b
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	40 e8       	ldi	r20, 0x80	; 128
     462:	5f e3       	ldi	r21, 0x3F	; 63
     464:	0e 94 81 09 	call	0x1302	; 0x1302 <__ltsf2>
     468:	88 23       	and	r24, r24
     46a:	2c f4       	brge	.+10     	; 0x476 <step+0x2e0>
		__ticks = 1;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	9f 83       	std	Y+7, r25	; 0x07
     472:	8e 83       	std	Y+6, r24	; 0x06
     474:	3f c0       	rjmp	.+126    	; 0x4f4 <step+0x35e>
	else if (__tmp > 65535)
     476:	68 85       	ldd	r22, Y+8	; 0x08
     478:	79 85       	ldd	r23, Y+9	; 0x09
     47a:	8a 85       	ldd	r24, Y+10	; 0x0a
     47c:	9b 85       	ldd	r25, Y+11	; 0x0b
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	3f ef       	ldi	r19, 0xFF	; 255
     482:	4f e7       	ldi	r20, 0x7F	; 127
     484:	57 e4       	ldi	r21, 0x47	; 71
     486:	0e 94 21 09 	call	0x1242	; 0x1242 <__gtsf2>
     48a:	18 16       	cp	r1, r24
     48c:	4c f5       	brge	.+82     	; 0x4e0 <step+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     48e:	6c 85       	ldd	r22, Y+12	; 0x0c
     490:	7d 85       	ldd	r23, Y+13	; 0x0d
     492:	8e 85       	ldd	r24, Y+14	; 0x0e
     494:	9f 85       	ldd	r25, Y+15	; 0x0f
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	40 e2       	ldi	r20, 0x20	; 32
     49c:	51 e4       	ldi	r21, 0x41	; 65
     49e:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3>
     4a2:	dc 01       	movw	r26, r24
     4a4:	cb 01       	movw	r24, r22
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixunssfsi>
     4ae:	dc 01       	movw	r26, r24
     4b0:	cb 01       	movw	r24, r22
     4b2:	9f 83       	std	Y+7, r25	; 0x07
     4b4:	8e 83       	std	Y+6, r24	; 0x06
     4b6:	0f c0       	rjmp	.+30     	; 0x4d6 <step+0x340>
     4b8:	80 e9       	ldi	r24, 0x90	; 144
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	9d 83       	std	Y+5, r25	; 0x05
     4be:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4c0:	8c 81       	ldd	r24, Y+4	; 0x04
     4c2:	9d 81       	ldd	r25, Y+5	; 0x05
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <step+0x32e>
     4c8:	9d 83       	std	Y+5, r25	; 0x05
     4ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4cc:	8e 81       	ldd	r24, Y+6	; 0x06
     4ce:	9f 81       	ldd	r25, Y+7	; 0x07
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	9f 83       	std	Y+7, r25	; 0x07
     4d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d6:	8e 81       	ldd	r24, Y+6	; 0x06
     4d8:	9f 81       	ldd	r25, Y+7	; 0x07
     4da:	00 97       	sbiw	r24, 0x00	; 0
     4dc:	69 f7       	brne	.-38     	; 0x4b8 <step+0x322>
     4de:	24 c0       	rjmp	.+72     	; 0x528 <step+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4e0:	68 85       	ldd	r22, Y+8	; 0x08
     4e2:	79 85       	ldd	r23, Y+9	; 0x09
     4e4:	8a 85       	ldd	r24, Y+10	; 0x0a
     4e6:	9b 85       	ldd	r25, Y+11	; 0x0b
     4e8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixunssfsi>
     4ec:	dc 01       	movw	r26, r24
     4ee:	cb 01       	movw	r24, r22
     4f0:	9f 83       	std	Y+7, r25	; 0x07
     4f2:	8e 83       	std	Y+6, r24	; 0x06
     4f4:	8e 81       	ldd	r24, Y+6	; 0x06
     4f6:	9f 81       	ldd	r25, Y+7	; 0x07
     4f8:	9b 83       	std	Y+3, r25	; 0x03
     4fa:	8a 83       	std	Y+2, r24	; 0x02
     4fc:	8a 81       	ldd	r24, Y+2	; 0x02
     4fe:	9b 81       	ldd	r25, Y+3	; 0x03
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <step+0x36a>
     504:	9b 83       	std	Y+3, r25	; 0x03
     506:	8a 83       	std	Y+2, r24	; 0x02
     508:	0f c0       	rjmp	.+30     	; 0x528 <step+0x392>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     50a:	69 89       	ldd	r22, Y+17	; 0x11
     50c:	7a 89       	ldd	r23, Y+18	; 0x12
     50e:	8b 89       	ldd	r24, Y+19	; 0x13
     510:	9c 89       	ldd	r25, Y+20	; 0x14
     512:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixunssfsi>
     516:	dc 01       	movw	r26, r24
     518:	cb 01       	movw	r24, r22
     51a:	88 8b       	std	Y+16, r24	; 0x10
     51c:	88 89       	ldd	r24, Y+16	; 0x10
     51e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	8a 95       	dec	r24
     524:	f1 f7       	brne	.-4      	; 0x522 <step+0x38c>
     526:	89 83       	std	Y+1, r24	; 0x01
}

void step(struct stepper *stepper)
{
    stepper->steps++;
    for (int x = 0; x < 4; x++)
     528:	89 a9       	ldd	r24, Y+49	; 0x31
     52a:	9a a9       	ldd	r25, Y+50	; 0x32
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	9a ab       	std	Y+50, r25	; 0x32
     530:	89 ab       	std	Y+49, r24	; 0x31
     532:	89 a9       	ldd	r24, Y+49	; 0x31
     534:	9a a9       	ldd	r25, Y+50	; 0x32
     536:	84 30       	cpi	r24, 0x04	; 4
     538:	91 05       	cpc	r25, r1
     53a:	0c f4       	brge	.+2      	; 0x53e <step+0x3a8>
     53c:	44 ce       	rjmp	.-888    	; 0x1c6 <step+0x30>
      PORTC |= (1<<stepper->pins[x]);
      _delay_us(600);
      PORTC &= ~(1<<stepper->pins[x]);
      _delay_us(600);
    }
}
     53e:	e4 96       	adiw	r28, 0x34	; 52
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	cf 91       	pop	r28
     54c:	df 91       	pop	r29
     54e:	08 95       	ret

00000550 <reverse_step>:

void reverse_step(struct stepper *stepper)
{
     550:	df 93       	push	r29
     552:	cf 93       	push	r28
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	e4 97       	sbiw	r28, 0x34	; 52
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	9c ab       	std	Y+52, r25	; 0x34
     566:	8b ab       	std	Y+51, r24	; 0x33
    stepper->steps--;
     568:	eb a9       	ldd	r30, Y+51	; 0x33
     56a:	fc a9       	ldd	r31, Y+52	; 0x34
     56c:	85 81       	ldd	r24, Z+5	; 0x05
     56e:	96 81       	ldd	r25, Z+6	; 0x06
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	eb a9       	ldd	r30, Y+51	; 0x33
     574:	fc a9       	ldd	r31, Y+52	; 0x34
     576:	96 83       	std	Z+6, r25	; 0x06
     578:	85 83       	std	Z+5, r24	; 0x05
    for (int x = 3; x >= 0; x--)
     57a:	83 e0       	ldi	r24, 0x03	; 3
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	9a ab       	std	Y+50, r25	; 0x32
     580:	89 ab       	std	Y+49, r24	; 0x31
     582:	b6 c1       	rjmp	.+876    	; 0x8f0 <reverse_step+0x3a0>
    {
      PORTC |= (1<<stepper->pins[x]);
     584:	a8 e2       	ldi	r26, 0x28	; 40
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	e8 e2       	ldi	r30, 0x28	; 40
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	48 2f       	mov	r20, r24
     590:	29 a9       	ldd	r18, Y+49	; 0x31
     592:	3a a9       	ldd	r19, Y+50	; 0x32
     594:	8b a9       	ldd	r24, Y+51	; 0x33
     596:	9c a9       	ldd	r25, Y+52	; 0x34
     598:	82 0f       	add	r24, r18
     59a:	93 1f       	adc	r25, r19
     59c:	fc 01       	movw	r30, r24
     59e:	31 96       	adiw	r30, 0x01	; 1
     5a0:	80 81       	ld	r24, Z
     5a2:	28 2f       	mov	r18, r24
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <reverse_step+0x60>
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	2a 95       	dec	r18
     5b2:	e2 f7       	brpl	.-8      	; 0x5ac <reverse_step+0x5c>
     5b4:	84 2b       	or	r24, r20
     5b6:	8c 93       	st	X, r24
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	a6 e1       	ldi	r26, 0x16	; 22
     5be:	b4 e4       	ldi	r27, 0x44	; 68
     5c0:	8d a7       	std	Y+45, r24	; 0x2d
     5c2:	9e a7       	std	Y+46, r25	; 0x2e
     5c4:	af a7       	std	Y+47, r26	; 0x2f
     5c6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     5c8:	6d a5       	ldd	r22, Y+45	; 0x2d
     5ca:	7e a5       	ldd	r23, Y+46	; 0x2e
     5cc:	8f a5       	ldd	r24, Y+47	; 0x2f
     5ce:	98 a9       	ldd	r25, Y+48	; 0x30
     5d0:	2b ea       	ldi	r18, 0xAB	; 171
     5d2:	3a ea       	ldi	r19, 0xAA	; 170
     5d4:	4a ea       	ldi	r20, 0xAA	; 170
     5d6:	50 e4       	ldi	r21, 0x40	; 64
     5d8:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	89 a7       	std	Y+41, r24	; 0x29
     5e2:	9a a7       	std	Y+42, r25	; 0x2a
     5e4:	ab a7       	std	Y+43, r26	; 0x2b
     5e6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     5e8:	69 a5       	ldd	r22, Y+41	; 0x29
     5ea:	7a a5       	ldd	r23, Y+42	; 0x2a
     5ec:	8b a5       	ldd	r24, Y+43	; 0x2b
     5ee:	9c a5       	ldd	r25, Y+44	; 0x2c
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	40 e8       	ldi	r20, 0x80	; 128
     5f6:	5f e3       	ldi	r21, 0x3F	; 63
     5f8:	0e 94 81 09 	call	0x1302	; 0x1302 <__ltsf2>
     5fc:	88 23       	and	r24, r24
     5fe:	1c f4       	brge	.+6      	; 0x606 <reverse_step+0xb6>
		__ticks = 1;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	88 a7       	std	Y+40, r24	; 0x28
     604:	91 c0       	rjmp	.+290    	; 0x728 <reverse_step+0x1d8>
	else if (__tmp > 255)
     606:	69 a5       	ldd	r22, Y+41	; 0x29
     608:	7a a5       	ldd	r23, Y+42	; 0x2a
     60a:	8b a5       	ldd	r24, Y+43	; 0x2b
     60c:	9c a5       	ldd	r25, Y+44	; 0x2c
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	4f e7       	ldi	r20, 0x7F	; 127
     614:	53 e4       	ldi	r21, 0x43	; 67
     616:	0e 94 21 09 	call	0x1242	; 0x1242 <__gtsf2>
     61a:	18 16       	cp	r1, r24
     61c:	0c f0       	brlt	.+2      	; 0x620 <reverse_step+0xd0>
     61e:	7b c0       	rjmp	.+246    	; 0x716 <reverse_step+0x1c6>
	{
		_delay_ms(__us / 1000.0);
     620:	6d a5       	ldd	r22, Y+45	; 0x2d
     622:	7e a5       	ldd	r23, Y+46	; 0x2e
     624:	8f a5       	ldd	r24, Y+47	; 0x2f
     626:	98 a9       	ldd	r25, Y+48	; 0x30
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	4a e7       	ldi	r20, 0x7A	; 122
     62e:	54 e4       	ldi	r21, 0x44	; 68
     630:	0e 94 75 08 	call	0x10ea	; 0x10ea <__divsf3>
     634:	dc 01       	movw	r26, r24
     636:	cb 01       	movw	r24, r22
     638:	8c a3       	std	Y+36, r24	; 0x24
     63a:	9d a3       	std	Y+37, r25	; 0x25
     63c:	ae a3       	std	Y+38, r26	; 0x26
     63e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     640:	6c a1       	ldd	r22, Y+36	; 0x24
     642:	7d a1       	ldd	r23, Y+37	; 0x25
     644:	8e a1       	ldd	r24, Y+38	; 0x26
     646:	9f a1       	ldd	r25, Y+39	; 0x27
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	4a e7       	ldi	r20, 0x7A	; 122
     64e:	55 e4       	ldi	r21, 0x45	; 69
     650:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3>
     654:	dc 01       	movw	r26, r24
     656:	cb 01       	movw	r24, r22
     658:	88 a3       	std	Y+32, r24	; 0x20
     65a:	99 a3       	std	Y+33, r25	; 0x21
     65c:	aa a3       	std	Y+34, r26	; 0x22
     65e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     660:	68 a1       	ldd	r22, Y+32	; 0x20
     662:	79 a1       	ldd	r23, Y+33	; 0x21
     664:	8a a1       	ldd	r24, Y+34	; 0x22
     666:	9b a1       	ldd	r25, Y+35	; 0x23
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	40 e8       	ldi	r20, 0x80	; 128
     66e:	5f e3       	ldi	r21, 0x3F	; 63
     670:	0e 94 81 09 	call	0x1302	; 0x1302 <__ltsf2>
     674:	88 23       	and	r24, r24
     676:	2c f4       	brge	.+10     	; 0x682 <reverse_step+0x132>
		__ticks = 1;
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	9f 8f       	std	Y+31, r25	; 0x1f
     67e:	8e 8f       	std	Y+30, r24	; 0x1e
     680:	3f c0       	rjmp	.+126    	; 0x700 <reverse_step+0x1b0>
	else if (__tmp > 65535)
     682:	68 a1       	ldd	r22, Y+32	; 0x20
     684:	79 a1       	ldd	r23, Y+33	; 0x21
     686:	8a a1       	ldd	r24, Y+34	; 0x22
     688:	9b a1       	ldd	r25, Y+35	; 0x23
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	3f ef       	ldi	r19, 0xFF	; 255
     68e:	4f e7       	ldi	r20, 0x7F	; 127
     690:	57 e4       	ldi	r21, 0x47	; 71
     692:	0e 94 21 09 	call	0x1242	; 0x1242 <__gtsf2>
     696:	18 16       	cp	r1, r24
     698:	4c f5       	brge	.+82     	; 0x6ec <reverse_step+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     69a:	6c a1       	ldd	r22, Y+36	; 0x24
     69c:	7d a1       	ldd	r23, Y+37	; 0x25
     69e:	8e a1       	ldd	r24, Y+38	; 0x26
     6a0:	9f a1       	ldd	r25, Y+39	; 0x27
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e2       	ldi	r20, 0x20	; 32
     6a8:	51 e4       	ldi	r21, 0x41	; 65
     6aa:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3>
     6ae:	dc 01       	movw	r26, r24
     6b0:	cb 01       	movw	r24, r22
     6b2:	bc 01       	movw	r22, r24
     6b4:	cd 01       	movw	r24, r26
     6b6:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixunssfsi>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	9f 8f       	std	Y+31, r25	; 0x1f
     6c0:	8e 8f       	std	Y+30, r24	; 0x1e
     6c2:	0f c0       	rjmp	.+30     	; 0x6e2 <reverse_step+0x192>
     6c4:	80 e9       	ldi	r24, 0x90	; 144
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	9d 8f       	std	Y+29, r25	; 0x1d
     6ca:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <reverse_step+0x180>
     6d4:	9d 8f       	std	Y+29, r25	; 0x1d
     6d6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6da:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	9f 8f       	std	Y+31, r25	; 0x1f
     6e0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6e6:	00 97       	sbiw	r24, 0x00	; 0
     6e8:	69 f7       	brne	.-38     	; 0x6c4 <reverse_step+0x174>
     6ea:	24 c0       	rjmp	.+72     	; 0x734 <reverse_step+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ec:	68 a1       	ldd	r22, Y+32	; 0x20
     6ee:	79 a1       	ldd	r23, Y+33	; 0x21
     6f0:	8a a1       	ldd	r24, Y+34	; 0x22
     6f2:	9b a1       	ldd	r25, Y+35	; 0x23
     6f4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixunssfsi>
     6f8:	dc 01       	movw	r26, r24
     6fa:	cb 01       	movw	r24, r22
     6fc:	9f 8f       	std	Y+31, r25	; 0x1f
     6fe:	8e 8f       	std	Y+30, r24	; 0x1e
     700:	8e 8d       	ldd	r24, Y+30	; 0x1e
     702:	9f 8d       	ldd	r25, Y+31	; 0x1f
     704:	9b 8f       	std	Y+27, r25	; 0x1b
     706:	8a 8f       	std	Y+26, r24	; 0x1a
     708:	8a 8d       	ldd	r24, Y+26	; 0x1a
     70a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	f1 f7       	brne	.-4      	; 0x70c <reverse_step+0x1bc>
     710:	9b 8f       	std	Y+27, r25	; 0x1b
     712:	8a 8f       	std	Y+26, r24	; 0x1a
     714:	0f c0       	rjmp	.+30     	; 0x734 <reverse_step+0x1e4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     716:	69 a5       	ldd	r22, Y+41	; 0x29
     718:	7a a5       	ldd	r23, Y+42	; 0x2a
     71a:	8b a5       	ldd	r24, Y+43	; 0x2b
     71c:	9c a5       	ldd	r25, Y+44	; 0x2c
     71e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixunssfsi>
     722:	dc 01       	movw	r26, r24
     724:	cb 01       	movw	r24, r22
     726:	88 a7       	std	Y+40, r24	; 0x28
     728:	88 a5       	ldd	r24, Y+40	; 0x28
     72a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     72c:	89 8d       	ldd	r24, Y+25	; 0x19
     72e:	8a 95       	dec	r24
     730:	f1 f7       	brne	.-4      	; 0x72e <reverse_step+0x1de>
     732:	89 8f       	std	Y+25, r24	; 0x19
      _delay_us(600);
      PORTC &= ~(1<<stepper->pins[x]);
     734:	a8 e2       	ldi	r26, 0x28	; 40
     736:	b0 e0       	ldi	r27, 0x00	; 0
     738:	e8 e2       	ldi	r30, 0x28	; 40
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	48 2f       	mov	r20, r24
     740:	29 a9       	ldd	r18, Y+49	; 0x31
     742:	3a a9       	ldd	r19, Y+50	; 0x32
     744:	8b a9       	ldd	r24, Y+51	; 0x33
     746:	9c a9       	ldd	r25, Y+52	; 0x34
     748:	82 0f       	add	r24, r18
     74a:	93 1f       	adc	r25, r19
     74c:	fc 01       	movw	r30, r24
     74e:	31 96       	adiw	r30, 0x01	; 1
     750:	80 81       	ld	r24, Z
     752:	28 2f       	mov	r18, r24
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	02 c0       	rjmp	.+4      	; 0x760 <reverse_step+0x210>
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	2a 95       	dec	r18
     762:	e2 f7       	brpl	.-8      	; 0x75c <reverse_step+0x20c>
     764:	80 95       	com	r24
     766:	84 23       	and	r24, r20
     768:	8c 93       	st	X, r24
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	a6 e1       	ldi	r26, 0x16	; 22
     770:	b4 e4       	ldi	r27, 0x44	; 68
     772:	8d 8b       	std	Y+21, r24	; 0x15
     774:	9e 8b       	std	Y+22, r25	; 0x16
     776:	af 8b       	std	Y+23, r26	; 0x17
     778:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     77a:	6d 89       	ldd	r22, Y+21	; 0x15
     77c:	7e 89       	ldd	r23, Y+22	; 0x16
     77e:	8f 89       	ldd	r24, Y+23	; 0x17
     780:	98 8d       	ldd	r25, Y+24	; 0x18
     782:	2b ea       	ldi	r18, 0xAB	; 171
     784:	3a ea       	ldi	r19, 0xAA	; 170
     786:	4a ea       	ldi	r20, 0xAA	; 170
     788:	50 e4       	ldi	r21, 0x40	; 64
     78a:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3>
     78e:	dc 01       	movw	r26, r24
     790:	cb 01       	movw	r24, r22
     792:	89 8b       	std	Y+17, r24	; 0x11
     794:	9a 8b       	std	Y+18, r25	; 0x12
     796:	ab 8b       	std	Y+19, r26	; 0x13
     798:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     79a:	69 89       	ldd	r22, Y+17	; 0x11
     79c:	7a 89       	ldd	r23, Y+18	; 0x12
     79e:	8b 89       	ldd	r24, Y+19	; 0x13
     7a0:	9c 89       	ldd	r25, Y+20	; 0x14
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 e8       	ldi	r20, 0x80	; 128
     7a8:	5f e3       	ldi	r21, 0x3F	; 63
     7aa:	0e 94 81 09 	call	0x1302	; 0x1302 <__ltsf2>
     7ae:	88 23       	and	r24, r24
     7b0:	1c f4       	brge	.+6      	; 0x7b8 <reverse_step+0x268>
		__ticks = 1;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	88 8b       	std	Y+16, r24	; 0x10
     7b6:	91 c0       	rjmp	.+290    	; 0x8da <reverse_step+0x38a>
	else if (__tmp > 255)
     7b8:	69 89       	ldd	r22, Y+17	; 0x11
     7ba:	7a 89       	ldd	r23, Y+18	; 0x12
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	4f e7       	ldi	r20, 0x7F	; 127
     7c6:	53 e4       	ldi	r21, 0x43	; 67
     7c8:	0e 94 21 09 	call	0x1242	; 0x1242 <__gtsf2>
     7cc:	18 16       	cp	r1, r24
     7ce:	0c f0       	brlt	.+2      	; 0x7d2 <reverse_step+0x282>
     7d0:	7b c0       	rjmp	.+246    	; 0x8c8 <reverse_step+0x378>
	{
		_delay_ms(__us / 1000.0);
     7d2:	6d 89       	ldd	r22, Y+21	; 0x15
     7d4:	7e 89       	ldd	r23, Y+22	; 0x16
     7d6:	8f 89       	ldd	r24, Y+23	; 0x17
     7d8:	98 8d       	ldd	r25, Y+24	; 0x18
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	4a e7       	ldi	r20, 0x7A	; 122
     7e0:	54 e4       	ldi	r21, 0x44	; 68
     7e2:	0e 94 75 08 	call	0x10ea	; 0x10ea <__divsf3>
     7e6:	dc 01       	movw	r26, r24
     7e8:	cb 01       	movw	r24, r22
     7ea:	8c 87       	std	Y+12, r24	; 0x0c
     7ec:	9d 87       	std	Y+13, r25	; 0x0d
     7ee:	ae 87       	std	Y+14, r26	; 0x0e
     7f0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7f2:	6c 85       	ldd	r22, Y+12	; 0x0c
     7f4:	7d 85       	ldd	r23, Y+13	; 0x0d
     7f6:	8e 85       	ldd	r24, Y+14	; 0x0e
     7f8:	9f 85       	ldd	r25, Y+15	; 0x0f
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	4a e7       	ldi	r20, 0x7A	; 122
     800:	55 e4       	ldi	r21, 0x45	; 69
     802:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3>
     806:	dc 01       	movw	r26, r24
     808:	cb 01       	movw	r24, r22
     80a:	88 87       	std	Y+8, r24	; 0x08
     80c:	99 87       	std	Y+9, r25	; 0x09
     80e:	aa 87       	std	Y+10, r26	; 0x0a
     810:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     812:	68 85       	ldd	r22, Y+8	; 0x08
     814:	79 85       	ldd	r23, Y+9	; 0x09
     816:	8a 85       	ldd	r24, Y+10	; 0x0a
     818:	9b 85       	ldd	r25, Y+11	; 0x0b
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	40 e8       	ldi	r20, 0x80	; 128
     820:	5f e3       	ldi	r21, 0x3F	; 63
     822:	0e 94 81 09 	call	0x1302	; 0x1302 <__ltsf2>
     826:	88 23       	and	r24, r24
     828:	2c f4       	brge	.+10     	; 0x834 <reverse_step+0x2e4>
		__ticks = 1;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	9f 83       	std	Y+7, r25	; 0x07
     830:	8e 83       	std	Y+6, r24	; 0x06
     832:	3f c0       	rjmp	.+126    	; 0x8b2 <reverse_step+0x362>
	else if (__tmp > 65535)
     834:	68 85       	ldd	r22, Y+8	; 0x08
     836:	79 85       	ldd	r23, Y+9	; 0x09
     838:	8a 85       	ldd	r24, Y+10	; 0x0a
     83a:	9b 85       	ldd	r25, Y+11	; 0x0b
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f e7       	ldi	r20, 0x7F	; 127
     842:	57 e4       	ldi	r21, 0x47	; 71
     844:	0e 94 21 09 	call	0x1242	; 0x1242 <__gtsf2>
     848:	18 16       	cp	r1, r24
     84a:	4c f5       	brge	.+82     	; 0x89e <reverse_step+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     84c:	6c 85       	ldd	r22, Y+12	; 0x0c
     84e:	7d 85       	ldd	r23, Y+13	; 0x0d
     850:	8e 85       	ldd	r24, Y+14	; 0x0e
     852:	9f 85       	ldd	r25, Y+15	; 0x0f
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e2       	ldi	r20, 0x20	; 32
     85a:	51 e4       	ldi	r21, 0x41	; 65
     85c:	0e 94 7b 07 	call	0xef6	; 0xef6 <__mulsf3>
     860:	dc 01       	movw	r26, r24
     862:	cb 01       	movw	r24, r22
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixunssfsi>
     86c:	dc 01       	movw	r26, r24
     86e:	cb 01       	movw	r24, r22
     870:	9f 83       	std	Y+7, r25	; 0x07
     872:	8e 83       	std	Y+6, r24	; 0x06
     874:	0f c0       	rjmp	.+30     	; 0x894 <reverse_step+0x344>
     876:	80 e9       	ldi	r24, 0x90	; 144
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	9d 83       	std	Y+5, r25	; 0x05
     87c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     87e:	8c 81       	ldd	r24, Y+4	; 0x04
     880:	9d 81       	ldd	r25, Y+5	; 0x05
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <reverse_step+0x332>
     886:	9d 83       	std	Y+5, r25	; 0x05
     888:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     88a:	8e 81       	ldd	r24, Y+6	; 0x06
     88c:	9f 81       	ldd	r25, Y+7	; 0x07
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	9f 83       	std	Y+7, r25	; 0x07
     892:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     894:	8e 81       	ldd	r24, Y+6	; 0x06
     896:	9f 81       	ldd	r25, Y+7	; 0x07
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	69 f7       	brne	.-38     	; 0x876 <reverse_step+0x326>
     89c:	24 c0       	rjmp	.+72     	; 0x8e6 <reverse_step+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     89e:	68 85       	ldd	r22, Y+8	; 0x08
     8a0:	79 85       	ldd	r23, Y+9	; 0x09
     8a2:	8a 85       	ldd	r24, Y+10	; 0x0a
     8a4:	9b 85       	ldd	r25, Y+11	; 0x0b
     8a6:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixunssfsi>
     8aa:	dc 01       	movw	r26, r24
     8ac:	cb 01       	movw	r24, r22
     8ae:	9f 83       	std	Y+7, r25	; 0x07
     8b0:	8e 83       	std	Y+6, r24	; 0x06
     8b2:	8e 81       	ldd	r24, Y+6	; 0x06
     8b4:	9f 81       	ldd	r25, Y+7	; 0x07
     8b6:	9b 83       	std	Y+3, r25	; 0x03
     8b8:	8a 83       	std	Y+2, r24	; 0x02
     8ba:	8a 81       	ldd	r24, Y+2	; 0x02
     8bc:	9b 81       	ldd	r25, Y+3	; 0x03
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <reverse_step+0x36e>
     8c2:	9b 83       	std	Y+3, r25	; 0x03
     8c4:	8a 83       	std	Y+2, r24	; 0x02
     8c6:	0f c0       	rjmp	.+30     	; 0x8e6 <reverse_step+0x396>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     8c8:	69 89       	ldd	r22, Y+17	; 0x11
     8ca:	7a 89       	ldd	r23, Y+18	; 0x12
     8cc:	8b 89       	ldd	r24, Y+19	; 0x13
     8ce:	9c 89       	ldd	r25, Y+20	; 0x14
     8d0:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixunssfsi>
     8d4:	dc 01       	movw	r26, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	88 8b       	std	Y+16, r24	; 0x10
     8da:	88 89       	ldd	r24, Y+16	; 0x10
     8dc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	8a 95       	dec	r24
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <reverse_step+0x390>
     8e4:	89 83       	std	Y+1, r24	; 0x01
}

void reverse_step(struct stepper *stepper)
{
    stepper->steps--;
    for (int x = 3; x >= 0; x--)
     8e6:	89 a9       	ldd	r24, Y+49	; 0x31
     8e8:	9a a9       	ldd	r25, Y+50	; 0x32
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	9a ab       	std	Y+50, r25	; 0x32
     8ee:	89 ab       	std	Y+49, r24	; 0x31
     8f0:	89 a9       	ldd	r24, Y+49	; 0x31
     8f2:	9a a9       	ldd	r25, Y+50	; 0x32
     8f4:	99 23       	and	r25, r25
     8f6:	0c f0       	brlt	.+2      	; 0x8fa <reverse_step+0x3aa>
     8f8:	45 ce       	rjmp	.-886    	; 0x584 <reverse_step+0x34>
      PORTC |= (1<<stepper->pins[x]);
      _delay_us(600);
      PORTC &= ~(1<<stepper->pins[x]);
      _delay_us(600);
    }
}
     8fa:	e4 96       	adiw	r28, 0x34	; 52
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	f8 94       	cli
     900:	de bf       	out	0x3e, r29	; 62
     902:	0f be       	out	0x3f, r0	; 63
     904:	cd bf       	out	0x3d, r28	; 61
     906:	cf 91       	pop	r28
     908:	df 91       	pop	r29
     90a:	08 95       	ret

0000090c <init_stepper_timer>:

void init_stepper_timer()
{
     90c:	df 93       	push	r29
     90e:	cf 93       	push	r28
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62

}
     914:	cf 91       	pop	r28
     916:	df 91       	pop	r29
     918:	08 95       	ret

0000091a <main>:

int main(void)
{
     91a:	0f 93       	push	r16
     91c:	df 93       	push	r29
     91e:	cf 93       	push	r28
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	2e 97       	sbiw	r28, 0x0e	; 14
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
    ///initializing stepper motors///

    struct stepper stepper1;
    struct stepper stepper2;
    construct_stepper(&stepper1, PC0, PC1, PC2, PC3);
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	22 e0       	ldi	r18, 0x02	; 2
     93a:	03 e0       	ldi	r16, 0x03	; 3
     93c:	0e 94 8d 00 	call	0x11a	; 0x11a <construct_stepper>
    construct_stepper(&stepper2, PC4, PC5, PC6, PC7);
     940:	ce 01       	movw	r24, r28
     942:	08 96       	adiw	r24, 0x08	; 8
     944:	64 e0       	ldi	r22, 0x04	; 4
     946:	45 e0       	ldi	r20, 0x05	; 5
     948:	26 e0       	ldi	r18, 0x06	; 6
     94a:	07 e0       	ldi	r16, 0x07	; 7
     94c:	0e 94 8d 00 	call	0x11a	; 0x11a <construct_stepper>
    initialize_steppers();
     950:	0e 94 bb 00 	call	0x176	; 0x176 <initialize_steppers>

    ///initializing serial coms
    USART_Init(MYUBRR);
     954:	87 e6       	ldi	r24, 0x67	; 103
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 b3 04 	call	0x966	; 0x966 <USART_Init>
    while(1)
    {
        reverse_step(&stepper1);
     95c:	ce 01       	movw	r24, r28
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	0e 94 a8 02 	call	0x550	; 0x550 <reverse_step>
     964:	fb cf       	rjmp	.-10     	; 0x95c <main+0x42>

00000966 <USART_Init>:

#include "serial.h"

void USART_Init( unsigned int ubrr)
{
     966:	df 93       	push	r29
     968:	cf 93       	push	r28
     96a:	0f 92       	push	r0
     96c:	0f 92       	push	r0
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
     972:	9a 83       	std	Y+2, r25	; 0x02
     974:	89 83       	std	Y+1, r24	; 0x01
    /*Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     976:	e5 ec       	ldi	r30, 0xC5	; 197
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	9a 81       	ldd	r25, Y+2	; 0x02
     97e:	89 2f       	mov	r24, r25
     980:	99 27       	eor	r25, r25
     982:	80 83       	st	Z, r24
    UBRR0L = (unsigned char)ubrr;
     984:	e4 ec       	ldi	r30, 0xC4	; 196
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	89 81       	ldd	r24, Y+1	; 0x01
     98a:	80 83       	st	Z, r24
    /*Enable receiver and transmitter */
    UCSR0B |= (1<<RXEN0);
     98c:	a1 ec       	ldi	r26, 0xC1	; 193
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	e1 ec       	ldi	r30, 0xC1	; 193
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	80 61       	ori	r24, 0x10	; 16
     998:	8c 93       	st	X, r24
    UCSR0B |= (1<<TXEN0);
     99a:	a1 ec       	ldi	r26, 0xC1	; 193
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e1 ec       	ldi	r30, 0xC1	; 193
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	80 81       	ld	r24, Z
     9a4:	88 60       	ori	r24, 0x08	; 8
     9a6:	8c 93       	st	X, r24
    /* Set frame format: 8data, 2stop bit */
    UCSR0C = (1<<UCSZ01)|(3<<UCSZ00);
     9a8:	e2 ec       	ldi	r30, 0xC2	; 194
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	86 e0       	ldi	r24, 0x06	; 6
     9ae:	80 83       	st	Z, r24
}
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	cf 91       	pop	r28
     9b6:	df 91       	pop	r29
     9b8:	08 95       	ret

000009ba <recieve_Byte>:


uint8_t recieve_Byte(void)
{
     9ba:	df 93       	push	r29
     9bc:	cf 93       	push	r28
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
    //moet worden vervangen met if. anders blijft de code hier hangen. als het aankomt blijft het toch in UDR0 staan totdat het wordt uitgelezen.
    loop_until_bit_is_set(UCSR0A, RXC0);
     9c2:	e0 ec       	ldi	r30, 0xC0	; 192
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	80 81       	ld	r24, Z
     9c8:	88 23       	and	r24, r24
     9ca:	dc f7       	brge	.-10     	; 0x9c2 <recieve_Byte+0x8>
    {
     return UDR0;
     9cc:	e6 ec       	ldi	r30, 0xC6	; 198
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
    }
    /*else
    {
        return -1;
    }*/
}
     9d2:	cf 91       	pop	r28
     9d4:	df 91       	pop	r29
     9d6:	08 95       	ret

000009d8 <transmit_byte>:

void transmit_byte(uint8_t byte)
{
     9d8:	df 93       	push	r29
     9da:	cf 93       	push	r28
     9dc:	0f 92       	push	r0
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	89 83       	std	Y+1, r24	; 0x01
    //vervangen met if
    loop_until_bit_is_set(UCSR0A, UDRE0);
     9e4:	e0 ec       	ldi	r30, 0xC0	; 192
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	88 2f       	mov	r24, r24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	80 72       	andi	r24, 0x20	; 32
     9f0:	90 70       	andi	r25, 0x00	; 0
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	b9 f3       	breq	.-18     	; 0x9e4 <transmit_byte+0xc>
    UDR0 = byte;
     9f6:	e6 ec       	ldi	r30, 0xC6	; 198
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	80 83       	st	Z, r24

}
     9fe:	0f 90       	pop	r0
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	08 95       	ret

00000a06 <print_byte>:

void print_byte(uint32_t byte)
{
     a06:	df 93       	push	r29
     a08:	cf 93       	push	r28
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <print_byte+0x6>
     a0c:	0f 92       	push	r0
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
     a12:	69 83       	std	Y+1, r22	; 0x01
     a14:	7a 83       	std	Y+2, r23	; 0x02
     a16:	8b 83       	std	Y+3, r24	; 0x03
     a18:	9c 83       	std	Y+4, r25	; 0x04
    //werkt niet zoals het hoort. volgorde verkeert?
    transmit_byte((byte/1000)%10);
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	9a 81       	ldd	r25, Y+2	; 0x02
     a1e:	ab 81       	ldd	r26, Y+3	; 0x03
     a20:	bc 81       	ldd	r27, Y+4	; 0x04
     a22:	28 ee       	ldi	r18, 0xE8	; 232
     a24:	33 e0       	ldi	r19, 0x03	; 3
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	bc 01       	movw	r22, r24
     a2c:	cd 01       	movw	r24, r26
     a2e:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__udivmodsi4>
     a32:	da 01       	movw	r26, r20
     a34:	c9 01       	movw	r24, r18
     a36:	2a e0       	ldi	r18, 0x0A	; 10
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	bc 01       	movw	r22, r24
     a40:	cd 01       	movw	r24, r26
     a42:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__udivmodsi4>
     a46:	dc 01       	movw	r26, r24
     a48:	cb 01       	movw	r24, r22
     a4a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <transmit_byte>
    transmit_byte((byte/100)%10);
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	9a 81       	ldd	r25, Y+2	; 0x02
     a52:	ab 81       	ldd	r26, Y+3	; 0x03
     a54:	bc 81       	ldd	r27, Y+4	; 0x04
     a56:	24 e6       	ldi	r18, 0x64	; 100
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	bc 01       	movw	r22, r24
     a60:	cd 01       	movw	r24, r26
     a62:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__udivmodsi4>
     a66:	da 01       	movw	r26, r20
     a68:	c9 01       	movw	r24, r18
     a6a:	2a e0       	ldi	r18, 0x0A	; 10
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	bc 01       	movw	r22, r24
     a74:	cd 01       	movw	r24, r26
     a76:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__udivmodsi4>
     a7a:	dc 01       	movw	r26, r24
     a7c:	cb 01       	movw	r24, r22
     a7e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <transmit_byte>
    transmit_byte((byte/10)%10);
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	9a 81       	ldd	r25, Y+2	; 0x02
     a86:	ab 81       	ldd	r26, Y+3	; 0x03
     a88:	bc 81       	ldd	r27, Y+4	; 0x04
     a8a:	2a e0       	ldi	r18, 0x0A	; 10
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	bc 01       	movw	r22, r24
     a94:	cd 01       	movw	r24, r26
     a96:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__udivmodsi4>
     a9a:	da 01       	movw	r26, r20
     a9c:	c9 01       	movw	r24, r18
     a9e:	2a e0       	ldi	r18, 0x0A	; 10
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	bc 01       	movw	r22, r24
     aa8:	cd 01       	movw	r24, r26
     aaa:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__udivmodsi4>
     aae:	dc 01       	movw	r26, r24
     ab0:	cb 01       	movw	r24, r22
     ab2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <transmit_byte>
    transmit_byte((byte%10));
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	9a 81       	ldd	r25, Y+2	; 0x02
     aba:	ab 81       	ldd	r26, Y+3	; 0x03
     abc:	bc 81       	ldd	r27, Y+4	; 0x04
     abe:	2a e0       	ldi	r18, 0x0A	; 10
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	bc 01       	movw	r22, r24
     ac8:	cd 01       	movw	r24, r26
     aca:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__udivmodsi4>
     ace:	dc 01       	movw	r26, r24
     ad0:	cb 01       	movw	r24, r22
     ad2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <transmit_byte>
    transmit_byte(0xA5);
     ad6:	85 ea       	ldi	r24, 0xA5	; 165
     ad8:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <transmit_byte>
}
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	cf 91       	pop	r28
     ae6:	df 91       	pop	r29
     ae8:	08 95       	ret

00000aea <recieve_string>:



void recieve_string(char code[])
{
     aea:	df 93       	push	r29
     aec:	cf 93       	push	r28
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <recieve_string+0x6>
     af0:	0f 92       	push	r0
     af2:	0f 92       	push	r0
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	9d 83       	std	Y+5, r25	; 0x05
     afa:	8c 83       	std	Y+4, r24	; 0x04
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
     afc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <recieve_Byte>
     b00:	8b 83       	std	Y+3, r24	; 0x03
    if(byte == '$')
     b02:	8b 81       	ldd	r24, Y+3	; 0x03
     b04:	84 32       	cpi	r24, 0x24	; 36
     b06:	c9 f4       	brne	.+50     	; 0xb3a <recieve_string+0x50>
    {
        int x = 1;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	9a 83       	std	Y+2, r25	; 0x02
     b0e:	89 83       	std	Y+1, r24	; 0x01
     b10:	11 c0       	rjmp	.+34     	; 0xb34 <recieve_string+0x4a>
        while(byte != '\n')
        {
            byte = recieve_Byte();
     b12:	0e 94 dd 04 	call	0x9ba	; 0x9ba <recieve_Byte>
     b16:	8b 83       	std	Y+3, r24	; 0x03
            code[x] = byte;
     b18:	29 81       	ldd	r18, Y+1	; 0x01
     b1a:	3a 81       	ldd	r19, Y+2	; 0x02
     b1c:	8c 81       	ldd	r24, Y+4	; 0x04
     b1e:	9d 81       	ldd	r25, Y+5	; 0x05
     b20:	fc 01       	movw	r30, r24
     b22:	e2 0f       	add	r30, r18
     b24:	f3 1f       	adc	r31, r19
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	80 83       	st	Z, r24
            x++;
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	9a 81       	ldd	r25, Y+2	; 0x02
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	9a 83       	std	Y+2, r25	; 0x02
     b32:	89 83       	std	Y+1, r24	; 0x01
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
    if(byte == '$')
    {
        int x = 1;
        while(byte != '\n')
     b34:	8b 81       	ldd	r24, Y+3	; 0x03
     b36:	8a 30       	cpi	r24, 0x0A	; 10
     b38:	61 f7       	brne	.-40     	; 0xb12 <recieve_string+0x28>
            byte = recieve_Byte();
            code[x] = byte;
            x++;
        }
    }
}
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	cf 91       	pop	r28
     b46:	df 91       	pop	r29
     b48:	08 95       	ret

00000b4a <__fixunssfsi>:
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	7b 01       	movw	r14, r22
     b54:	8c 01       	movw	r16, r24
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	5f e4       	ldi	r21, 0x4F	; 79
     b5e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__gesf2>
     b62:	88 23       	and	r24, r24
     b64:	8c f0       	brlt	.+34     	; 0xb88 <__fixunssfsi+0x3e>
     b66:	c8 01       	movw	r24, r16
     b68:	b7 01       	movw	r22, r14
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	5f e4       	ldi	r21, 0x4F	; 79
     b72:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__subsf3>
     b76:	0e 94 b1 09 	call	0x1362	; 0x1362 <__fixsfsi>
     b7a:	9b 01       	movw	r18, r22
     b7c:	ac 01       	movw	r20, r24
     b7e:	20 50       	subi	r18, 0x00	; 0
     b80:	30 40       	sbci	r19, 0x00	; 0
     b82:	40 40       	sbci	r20, 0x00	; 0
     b84:	50 48       	sbci	r21, 0x80	; 128
     b86:	06 c0       	rjmp	.+12     	; 0xb94 <__fixunssfsi+0x4a>
     b88:	c8 01       	movw	r24, r16
     b8a:	b7 01       	movw	r22, r14
     b8c:	0e 94 b1 09 	call	0x1362	; 0x1362 <__fixsfsi>
     b90:	9b 01       	movw	r18, r22
     b92:	ac 01       	movw	r20, r24
     b94:	b9 01       	movw	r22, r18
     b96:	ca 01       	movw	r24, r20
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <_fpadd_parts>:
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e7 ed       	ldi	r30, 0xD7	; 215
     ba8:	f5 e0       	ldi	r31, 0x05	; 5
     baa:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__prologue_saves__>
     bae:	dc 01       	movw	r26, r24
     bb0:	2b 01       	movw	r4, r22
     bb2:	fa 01       	movw	r30, r20
     bb4:	9c 91       	ld	r25, X
     bb6:	92 30       	cpi	r25, 0x02	; 2
     bb8:	08 f4       	brcc	.+2      	; 0xbbc <_fpadd_parts+0x1a>
     bba:	39 c1       	rjmp	.+626    	; 0xe2e <_fpadd_parts+0x28c>
     bbc:	eb 01       	movw	r28, r22
     bbe:	88 81       	ld	r24, Y
     bc0:	82 30       	cpi	r24, 0x02	; 2
     bc2:	08 f4       	brcc	.+2      	; 0xbc6 <_fpadd_parts+0x24>
     bc4:	33 c1       	rjmp	.+614    	; 0xe2c <_fpadd_parts+0x28a>
     bc6:	94 30       	cpi	r25, 0x04	; 4
     bc8:	69 f4       	brne	.+26     	; 0xbe4 <_fpadd_parts+0x42>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <_fpadd_parts+0x2e>
     bce:	2f c1       	rjmp	.+606    	; 0xe2e <_fpadd_parts+0x28c>
     bd0:	11 96       	adiw	r26, 0x01	; 1
     bd2:	9c 91       	ld	r25, X
     bd4:	11 97       	sbiw	r26, 0x01	; 1
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	98 17       	cp	r25, r24
     bda:	09 f4       	brne	.+2      	; 0xbde <_fpadd_parts+0x3c>
     bdc:	28 c1       	rjmp	.+592    	; 0xe2e <_fpadd_parts+0x28c>
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	b2 e0       	ldi	r27, 0x02	; 2
     be2:	25 c1       	rjmp	.+586    	; 0xe2e <_fpadd_parts+0x28c>
     be4:	84 30       	cpi	r24, 0x04	; 4
     be6:	09 f4       	brne	.+2      	; 0xbea <_fpadd_parts+0x48>
     be8:	21 c1       	rjmp	.+578    	; 0xe2c <_fpadd_parts+0x28a>
     bea:	82 30       	cpi	r24, 0x02	; 2
     bec:	a9 f4       	brne	.+42     	; 0xc18 <_fpadd_parts+0x76>
     bee:	92 30       	cpi	r25, 0x02	; 2
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <_fpadd_parts+0x52>
     bf2:	1d c1       	rjmp	.+570    	; 0xe2e <_fpadd_parts+0x28c>
     bf4:	9a 01       	movw	r18, r20
     bf6:	ad 01       	movw	r20, r26
     bf8:	88 e0       	ldi	r24, 0x08	; 8
     bfa:	ea 01       	movw	r28, r20
     bfc:	09 90       	ld	r0, Y+
     bfe:	ae 01       	movw	r20, r28
     c00:	e9 01       	movw	r28, r18
     c02:	09 92       	st	Y+, r0
     c04:	9e 01       	movw	r18, r28
     c06:	81 50       	subi	r24, 0x01	; 1
     c08:	c1 f7       	brne	.-16     	; 0xbfa <_fpadd_parts+0x58>
     c0a:	e2 01       	movw	r28, r4
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	11 96       	adiw	r26, 0x01	; 1
     c10:	9c 91       	ld	r25, X
     c12:	89 23       	and	r24, r25
     c14:	81 83       	std	Z+1, r24	; 0x01
     c16:	08 c1       	rjmp	.+528    	; 0xe28 <_fpadd_parts+0x286>
     c18:	92 30       	cpi	r25, 0x02	; 2
     c1a:	09 f4       	brne	.+2      	; 0xc1e <_fpadd_parts+0x7c>
     c1c:	07 c1       	rjmp	.+526    	; 0xe2c <_fpadd_parts+0x28a>
     c1e:	12 96       	adiw	r26, 0x02	; 2
     c20:	2d 90       	ld	r2, X+
     c22:	3c 90       	ld	r3, X
     c24:	13 97       	sbiw	r26, 0x03	; 3
     c26:	eb 01       	movw	r28, r22
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	9b 81       	ldd	r25, Y+3	; 0x03
     c2c:	14 96       	adiw	r26, 0x04	; 4
     c2e:	ad 90       	ld	r10, X+
     c30:	bd 90       	ld	r11, X+
     c32:	cd 90       	ld	r12, X+
     c34:	dc 90       	ld	r13, X
     c36:	17 97       	sbiw	r26, 0x07	; 7
     c38:	ec 80       	ldd	r14, Y+4	; 0x04
     c3a:	fd 80       	ldd	r15, Y+5	; 0x05
     c3c:	0e 81       	ldd	r16, Y+6	; 0x06
     c3e:	1f 81       	ldd	r17, Y+7	; 0x07
     c40:	91 01       	movw	r18, r2
     c42:	28 1b       	sub	r18, r24
     c44:	39 0b       	sbc	r19, r25
     c46:	b9 01       	movw	r22, r18
     c48:	37 ff       	sbrs	r19, 7
     c4a:	04 c0       	rjmp	.+8      	; 0xc54 <_fpadd_parts+0xb2>
     c4c:	66 27       	eor	r22, r22
     c4e:	77 27       	eor	r23, r23
     c50:	62 1b       	sub	r22, r18
     c52:	73 0b       	sbc	r23, r19
     c54:	60 32       	cpi	r22, 0x20	; 32
     c56:	71 05       	cpc	r23, r1
     c58:	0c f0       	brlt	.+2      	; 0xc5c <_fpadd_parts+0xba>
     c5a:	61 c0       	rjmp	.+194    	; 0xd1e <_fpadd_parts+0x17c>
     c5c:	12 16       	cp	r1, r18
     c5e:	13 06       	cpc	r1, r19
     c60:	6c f5       	brge	.+90     	; 0xcbc <_fpadd_parts+0x11a>
     c62:	37 01       	movw	r6, r14
     c64:	48 01       	movw	r8, r16
     c66:	06 2e       	mov	r0, r22
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <_fpadd_parts+0xd0>
     c6a:	96 94       	lsr	r9
     c6c:	87 94       	ror	r8
     c6e:	77 94       	ror	r7
     c70:	67 94       	ror	r6
     c72:	0a 94       	dec	r0
     c74:	d2 f7       	brpl	.-12     	; 0xc6a <_fpadd_parts+0xc8>
     c76:	21 e0       	ldi	r18, 0x01	; 1
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <_fpadd_parts+0xe6>
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	d2 f7       	brpl	.-12     	; 0xc80 <_fpadd_parts+0xde>
     c8c:	21 50       	subi	r18, 0x01	; 1
     c8e:	30 40       	sbci	r19, 0x00	; 0
     c90:	40 40       	sbci	r20, 0x00	; 0
     c92:	50 40       	sbci	r21, 0x00	; 0
     c94:	2e 21       	and	r18, r14
     c96:	3f 21       	and	r19, r15
     c98:	40 23       	and	r20, r16
     c9a:	51 23       	and	r21, r17
     c9c:	21 15       	cp	r18, r1
     c9e:	31 05       	cpc	r19, r1
     ca0:	41 05       	cpc	r20, r1
     ca2:	51 05       	cpc	r21, r1
     ca4:	21 f0       	breq	.+8      	; 0xcae <_fpadd_parts+0x10c>
     ca6:	21 e0       	ldi	r18, 0x01	; 1
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	79 01       	movw	r14, r18
     cb0:	8a 01       	movw	r16, r20
     cb2:	e6 28       	or	r14, r6
     cb4:	f7 28       	or	r15, r7
     cb6:	08 29       	or	r16, r8
     cb8:	19 29       	or	r17, r9
     cba:	3c c0       	rjmp	.+120    	; 0xd34 <_fpadd_parts+0x192>
     cbc:	23 2b       	or	r18, r19
     cbe:	d1 f1       	breq	.+116    	; 0xd34 <_fpadd_parts+0x192>
     cc0:	26 0e       	add	r2, r22
     cc2:	37 1e       	adc	r3, r23
     cc4:	35 01       	movw	r6, r10
     cc6:	46 01       	movw	r8, r12
     cc8:	06 2e       	mov	r0, r22
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <_fpadd_parts+0x132>
     ccc:	96 94       	lsr	r9
     cce:	87 94       	ror	r8
     cd0:	77 94       	ror	r7
     cd2:	67 94       	ror	r6
     cd4:	0a 94       	dec	r0
     cd6:	d2 f7       	brpl	.-12     	; 0xccc <_fpadd_parts+0x12a>
     cd8:	21 e0       	ldi	r18, 0x01	; 1
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <_fpadd_parts+0x148>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	6a 95       	dec	r22
     cec:	d2 f7       	brpl	.-12     	; 0xce2 <_fpadd_parts+0x140>
     cee:	21 50       	subi	r18, 0x01	; 1
     cf0:	30 40       	sbci	r19, 0x00	; 0
     cf2:	40 40       	sbci	r20, 0x00	; 0
     cf4:	50 40       	sbci	r21, 0x00	; 0
     cf6:	2a 21       	and	r18, r10
     cf8:	3b 21       	and	r19, r11
     cfa:	4c 21       	and	r20, r12
     cfc:	5d 21       	and	r21, r13
     cfe:	21 15       	cp	r18, r1
     d00:	31 05       	cpc	r19, r1
     d02:	41 05       	cpc	r20, r1
     d04:	51 05       	cpc	r21, r1
     d06:	21 f0       	breq	.+8      	; 0xd10 <_fpadd_parts+0x16e>
     d08:	21 e0       	ldi	r18, 0x01	; 1
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	59 01       	movw	r10, r18
     d12:	6a 01       	movw	r12, r20
     d14:	a6 28       	or	r10, r6
     d16:	b7 28       	or	r11, r7
     d18:	c8 28       	or	r12, r8
     d1a:	d9 28       	or	r13, r9
     d1c:	0b c0       	rjmp	.+22     	; 0xd34 <_fpadd_parts+0x192>
     d1e:	82 15       	cp	r24, r2
     d20:	93 05       	cpc	r25, r3
     d22:	2c f0       	brlt	.+10     	; 0xd2e <_fpadd_parts+0x18c>
     d24:	1c 01       	movw	r2, r24
     d26:	aa 24       	eor	r10, r10
     d28:	bb 24       	eor	r11, r11
     d2a:	65 01       	movw	r12, r10
     d2c:	03 c0       	rjmp	.+6      	; 0xd34 <_fpadd_parts+0x192>
     d2e:	ee 24       	eor	r14, r14
     d30:	ff 24       	eor	r15, r15
     d32:	87 01       	movw	r16, r14
     d34:	11 96       	adiw	r26, 0x01	; 1
     d36:	9c 91       	ld	r25, X
     d38:	d2 01       	movw	r26, r4
     d3a:	11 96       	adiw	r26, 0x01	; 1
     d3c:	8c 91       	ld	r24, X
     d3e:	98 17       	cp	r25, r24
     d40:	09 f4       	brne	.+2      	; 0xd44 <_fpadd_parts+0x1a2>
     d42:	45 c0       	rjmp	.+138    	; 0xdce <_fpadd_parts+0x22c>
     d44:	99 23       	and	r25, r25
     d46:	39 f0       	breq	.+14     	; 0xd56 <_fpadd_parts+0x1b4>
     d48:	a8 01       	movw	r20, r16
     d4a:	97 01       	movw	r18, r14
     d4c:	2a 19       	sub	r18, r10
     d4e:	3b 09       	sbc	r19, r11
     d50:	4c 09       	sbc	r20, r12
     d52:	5d 09       	sbc	r21, r13
     d54:	06 c0       	rjmp	.+12     	; 0xd62 <_fpadd_parts+0x1c0>
     d56:	a6 01       	movw	r20, r12
     d58:	95 01       	movw	r18, r10
     d5a:	2e 19       	sub	r18, r14
     d5c:	3f 09       	sbc	r19, r15
     d5e:	40 0b       	sbc	r20, r16
     d60:	51 0b       	sbc	r21, r17
     d62:	57 fd       	sbrc	r21, 7
     d64:	08 c0       	rjmp	.+16     	; 0xd76 <_fpadd_parts+0x1d4>
     d66:	11 82       	std	Z+1, r1	; 0x01
     d68:	33 82       	std	Z+3, r3	; 0x03
     d6a:	22 82       	std	Z+2, r2	; 0x02
     d6c:	24 83       	std	Z+4, r18	; 0x04
     d6e:	35 83       	std	Z+5, r19	; 0x05
     d70:	46 83       	std	Z+6, r20	; 0x06
     d72:	57 83       	std	Z+7, r21	; 0x07
     d74:	1d c0       	rjmp	.+58     	; 0xdb0 <_fpadd_parts+0x20e>
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	81 83       	std	Z+1, r24	; 0x01
     d7a:	33 82       	std	Z+3, r3	; 0x03
     d7c:	22 82       	std	Z+2, r2	; 0x02
     d7e:	88 27       	eor	r24, r24
     d80:	99 27       	eor	r25, r25
     d82:	dc 01       	movw	r26, r24
     d84:	82 1b       	sub	r24, r18
     d86:	93 0b       	sbc	r25, r19
     d88:	a4 0b       	sbc	r26, r20
     d8a:	b5 0b       	sbc	r27, r21
     d8c:	84 83       	std	Z+4, r24	; 0x04
     d8e:	95 83       	std	Z+5, r25	; 0x05
     d90:	a6 83       	std	Z+6, r26	; 0x06
     d92:	b7 83       	std	Z+7, r27	; 0x07
     d94:	0d c0       	rjmp	.+26     	; 0xdb0 <_fpadd_parts+0x20e>
     d96:	22 0f       	add	r18, r18
     d98:	33 1f       	adc	r19, r19
     d9a:	44 1f       	adc	r20, r20
     d9c:	55 1f       	adc	r21, r21
     d9e:	24 83       	std	Z+4, r18	; 0x04
     da0:	35 83       	std	Z+5, r19	; 0x05
     da2:	46 83       	std	Z+6, r20	; 0x06
     da4:	57 83       	std	Z+7, r21	; 0x07
     da6:	82 81       	ldd	r24, Z+2	; 0x02
     da8:	93 81       	ldd	r25, Z+3	; 0x03
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	93 83       	std	Z+3, r25	; 0x03
     dae:	82 83       	std	Z+2, r24	; 0x02
     db0:	24 81       	ldd	r18, Z+4	; 0x04
     db2:	35 81       	ldd	r19, Z+5	; 0x05
     db4:	46 81       	ldd	r20, Z+6	; 0x06
     db6:	57 81       	ldd	r21, Z+7	; 0x07
     db8:	da 01       	movw	r26, r20
     dba:	c9 01       	movw	r24, r18
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	a1 09       	sbc	r26, r1
     dc0:	b1 09       	sbc	r27, r1
     dc2:	8f 5f       	subi	r24, 0xFF	; 255
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	af 4f       	sbci	r26, 0xFF	; 255
     dc8:	bf 43       	sbci	r27, 0x3F	; 63
     dca:	28 f3       	brcs	.-54     	; 0xd96 <_fpadd_parts+0x1f4>
     dcc:	0b c0       	rjmp	.+22     	; 0xde4 <_fpadd_parts+0x242>
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	33 82       	std	Z+3, r3	; 0x03
     dd2:	22 82       	std	Z+2, r2	; 0x02
     dd4:	ea 0c       	add	r14, r10
     dd6:	fb 1c       	adc	r15, r11
     dd8:	0c 1d       	adc	r16, r12
     dda:	1d 1d       	adc	r17, r13
     ddc:	e4 82       	std	Z+4, r14	; 0x04
     dde:	f5 82       	std	Z+5, r15	; 0x05
     de0:	06 83       	std	Z+6, r16	; 0x06
     de2:	17 83       	std	Z+7, r17	; 0x07
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	80 83       	st	Z, r24
     de8:	24 81       	ldd	r18, Z+4	; 0x04
     dea:	35 81       	ldd	r19, Z+5	; 0x05
     dec:	46 81       	ldd	r20, Z+6	; 0x06
     dee:	57 81       	ldd	r21, Z+7	; 0x07
     df0:	57 ff       	sbrs	r21, 7
     df2:	1a c0       	rjmp	.+52     	; 0xe28 <_fpadd_parts+0x286>
     df4:	c9 01       	movw	r24, r18
     df6:	aa 27       	eor	r26, r26
     df8:	97 fd       	sbrc	r25, 7
     dfa:	a0 95       	com	r26
     dfc:	ba 2f       	mov	r27, r26
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	90 70       	andi	r25, 0x00	; 0
     e02:	a0 70       	andi	r26, 0x00	; 0
     e04:	b0 70       	andi	r27, 0x00	; 0
     e06:	56 95       	lsr	r21
     e08:	47 95       	ror	r20
     e0a:	37 95       	ror	r19
     e0c:	27 95       	ror	r18
     e0e:	82 2b       	or	r24, r18
     e10:	93 2b       	or	r25, r19
     e12:	a4 2b       	or	r26, r20
     e14:	b5 2b       	or	r27, r21
     e16:	84 83       	std	Z+4, r24	; 0x04
     e18:	95 83       	std	Z+5, r25	; 0x05
     e1a:	a6 83       	std	Z+6, r26	; 0x06
     e1c:	b7 83       	std	Z+7, r27	; 0x07
     e1e:	82 81       	ldd	r24, Z+2	; 0x02
     e20:	93 81       	ldd	r25, Z+3	; 0x03
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	93 83       	std	Z+3, r25	; 0x03
     e26:	82 83       	std	Z+2, r24	; 0x02
     e28:	df 01       	movw	r26, r30
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <_fpadd_parts+0x28c>
     e2c:	d2 01       	movw	r26, r4
     e2e:	cd 01       	movw	r24, r26
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	e2 e1       	ldi	r30, 0x12	; 18
     e36:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__epilogue_restores__>

00000e3a <__subsf3>:
     e3a:	a0 e2       	ldi	r26, 0x20	; 32
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e3 e2       	ldi	r30, 0x23	; 35
     e40:	f7 e0       	ldi	r31, 0x07	; 7
     e42:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__prologue_saves__+0x18>
     e46:	69 83       	std	Y+1, r22	; 0x01
     e48:	7a 83       	std	Y+2, r23	; 0x02
     e4a:	8b 83       	std	Y+3, r24	; 0x03
     e4c:	9c 83       	std	Y+4, r25	; 0x04
     e4e:	2d 83       	std	Y+5, r18	; 0x05
     e50:	3e 83       	std	Y+6, r19	; 0x06
     e52:	4f 83       	std	Y+7, r20	; 0x07
     e54:	58 87       	std	Y+8, r21	; 0x08
     e56:	e9 e0       	ldi	r30, 0x09	; 9
     e58:	ee 2e       	mov	r14, r30
     e5a:	f1 2c       	mov	r15, r1
     e5c:	ec 0e       	add	r14, r28
     e5e:	fd 1e       	adc	r15, r29
     e60:	ce 01       	movw	r24, r28
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	b7 01       	movw	r22, r14
     e66:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
     e6a:	8e 01       	movw	r16, r28
     e6c:	0f 5e       	subi	r16, 0xEF	; 239
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	ce 01       	movw	r24, r28
     e72:	05 96       	adiw	r24, 0x05	; 5
     e74:	b8 01       	movw	r22, r16
     e76:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
     e7a:	8a 89       	ldd	r24, Y+18	; 0x12
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	89 27       	eor	r24, r25
     e80:	8a 8b       	std	Y+18, r24	; 0x12
     e82:	c7 01       	movw	r24, r14
     e84:	b8 01       	movw	r22, r16
     e86:	ae 01       	movw	r20, r28
     e88:	47 5e       	subi	r20, 0xE7	; 231
     e8a:	5f 4f       	sbci	r21, 0xFF	; 255
     e8c:	0e 94 d1 05 	call	0xba2	; 0xba2 <_fpadd_parts>
     e90:	0e 94 05 0a 	call	0x140a	; 0x140a <__pack_f>
     e94:	a0 96       	adiw	r28, 0x20	; 32
     e96:	e6 e0       	ldi	r30, 0x06	; 6
     e98:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__epilogue_restores__+0x18>

00000e9c <__addsf3>:
     e9c:	a0 e2       	ldi	r26, 0x20	; 32
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e4 e5       	ldi	r30, 0x54	; 84
     ea2:	f7 e0       	ldi	r31, 0x07	; 7
     ea4:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__prologue_saves__+0x18>
     ea8:	69 83       	std	Y+1, r22	; 0x01
     eaa:	7a 83       	std	Y+2, r23	; 0x02
     eac:	8b 83       	std	Y+3, r24	; 0x03
     eae:	9c 83       	std	Y+4, r25	; 0x04
     eb0:	2d 83       	std	Y+5, r18	; 0x05
     eb2:	3e 83       	std	Y+6, r19	; 0x06
     eb4:	4f 83       	std	Y+7, r20	; 0x07
     eb6:	58 87       	std	Y+8, r21	; 0x08
     eb8:	f9 e0       	ldi	r31, 0x09	; 9
     eba:	ef 2e       	mov	r14, r31
     ebc:	f1 2c       	mov	r15, r1
     ebe:	ec 0e       	add	r14, r28
     ec0:	fd 1e       	adc	r15, r29
     ec2:	ce 01       	movw	r24, r28
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	b7 01       	movw	r22, r14
     ec8:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
     ecc:	8e 01       	movw	r16, r28
     ece:	0f 5e       	subi	r16, 0xEF	; 239
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
     ed2:	ce 01       	movw	r24, r28
     ed4:	05 96       	adiw	r24, 0x05	; 5
     ed6:	b8 01       	movw	r22, r16
     ed8:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
     edc:	c7 01       	movw	r24, r14
     ede:	b8 01       	movw	r22, r16
     ee0:	ae 01       	movw	r20, r28
     ee2:	47 5e       	subi	r20, 0xE7	; 231
     ee4:	5f 4f       	sbci	r21, 0xFF	; 255
     ee6:	0e 94 d1 05 	call	0xba2	; 0xba2 <_fpadd_parts>
     eea:	0e 94 05 0a 	call	0x140a	; 0x140a <__pack_f>
     eee:	a0 96       	adiw	r28, 0x20	; 32
     ef0:	e6 e0       	ldi	r30, 0x06	; 6
     ef2:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__epilogue_restores__+0x18>

00000ef6 <__mulsf3>:
     ef6:	a0 e2       	ldi	r26, 0x20	; 32
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e1 e8       	ldi	r30, 0x81	; 129
     efc:	f7 e0       	ldi	r31, 0x07	; 7
     efe:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__prologue_saves__>
     f02:	69 83       	std	Y+1, r22	; 0x01
     f04:	7a 83       	std	Y+2, r23	; 0x02
     f06:	8b 83       	std	Y+3, r24	; 0x03
     f08:	9c 83       	std	Y+4, r25	; 0x04
     f0a:	2d 83       	std	Y+5, r18	; 0x05
     f0c:	3e 83       	std	Y+6, r19	; 0x06
     f0e:	4f 83       	std	Y+7, r20	; 0x07
     f10:	58 87       	std	Y+8, r21	; 0x08
     f12:	ce 01       	movw	r24, r28
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	be 01       	movw	r22, r28
     f18:	67 5f       	subi	r22, 0xF7	; 247
     f1a:	7f 4f       	sbci	r23, 0xFF	; 255
     f1c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
     f20:	ce 01       	movw	r24, r28
     f22:	05 96       	adiw	r24, 0x05	; 5
     f24:	be 01       	movw	r22, r28
     f26:	6f 5e       	subi	r22, 0xEF	; 239
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
     f2e:	99 85       	ldd	r25, Y+9	; 0x09
     f30:	92 30       	cpi	r25, 0x02	; 2
     f32:	88 f0       	brcs	.+34     	; 0xf56 <__mulsf3+0x60>
     f34:	89 89       	ldd	r24, Y+17	; 0x11
     f36:	82 30       	cpi	r24, 0x02	; 2
     f38:	c8 f0       	brcs	.+50     	; 0xf6c <__mulsf3+0x76>
     f3a:	94 30       	cpi	r25, 0x04	; 4
     f3c:	19 f4       	brne	.+6      	; 0xf44 <__mulsf3+0x4e>
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	51 f4       	brne	.+20     	; 0xf56 <__mulsf3+0x60>
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <__mulsf3+0x56>
     f44:	84 30       	cpi	r24, 0x04	; 4
     f46:	29 f4       	brne	.+10     	; 0xf52 <__mulsf3+0x5c>
     f48:	92 30       	cpi	r25, 0x02	; 2
     f4a:	81 f4       	brne	.+32     	; 0xf6c <__mulsf3+0x76>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	92 e0       	ldi	r25, 0x02	; 2
     f50:	c6 c0       	rjmp	.+396    	; 0x10de <__mulsf3+0x1e8>
     f52:	92 30       	cpi	r25, 0x02	; 2
     f54:	49 f4       	brne	.+18     	; 0xf68 <__mulsf3+0x72>
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5a:	8a 89       	ldd	r24, Y+18	; 0x12
     f5c:	98 13       	cpse	r25, r24
     f5e:	21 e0       	ldi	r18, 0x01	; 1
     f60:	2a 87       	std	Y+10, r18	; 0x0a
     f62:	ce 01       	movw	r24, r28
     f64:	09 96       	adiw	r24, 0x09	; 9
     f66:	bb c0       	rjmp	.+374    	; 0x10de <__mulsf3+0x1e8>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	49 f4       	brne	.+18     	; 0xf7e <__mulsf3+0x88>
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	8a 89       	ldd	r24, Y+18	; 0x12
     f72:	98 13       	cpse	r25, r24
     f74:	21 e0       	ldi	r18, 0x01	; 1
     f76:	2a 8b       	std	Y+18, r18	; 0x12
     f78:	ce 01       	movw	r24, r28
     f7a:	41 96       	adiw	r24, 0x11	; 17
     f7c:	b0 c0       	rjmp	.+352    	; 0x10de <__mulsf3+0x1e8>
     f7e:	2d 84       	ldd	r2, Y+13	; 0x0d
     f80:	3e 84       	ldd	r3, Y+14	; 0x0e
     f82:	4f 84       	ldd	r4, Y+15	; 0x0f
     f84:	58 88       	ldd	r5, Y+16	; 0x10
     f86:	6d 88       	ldd	r6, Y+21	; 0x15
     f88:	7e 88       	ldd	r7, Y+22	; 0x16
     f8a:	8f 88       	ldd	r8, Y+23	; 0x17
     f8c:	98 8c       	ldd	r9, Y+24	; 0x18
     f8e:	ee 24       	eor	r14, r14
     f90:	ff 24       	eor	r15, r15
     f92:	87 01       	movw	r16, r14
     f94:	aa 24       	eor	r10, r10
     f96:	bb 24       	eor	r11, r11
     f98:	65 01       	movw	r12, r10
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	e0 e0       	ldi	r30, 0x00	; 0
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	c1 01       	movw	r24, r2
     fa8:	81 70       	andi	r24, 0x01	; 1
     faa:	90 70       	andi	r25, 0x00	; 0
     fac:	89 2b       	or	r24, r25
     fae:	e9 f0       	breq	.+58     	; 0xfea <__mulsf3+0xf4>
     fb0:	e6 0c       	add	r14, r6
     fb2:	f7 1c       	adc	r15, r7
     fb4:	08 1d       	adc	r16, r8
     fb6:	19 1d       	adc	r17, r9
     fb8:	9a 01       	movw	r18, r20
     fba:	ab 01       	movw	r20, r22
     fbc:	2a 0d       	add	r18, r10
     fbe:	3b 1d       	adc	r19, r11
     fc0:	4c 1d       	adc	r20, r12
     fc2:	5d 1d       	adc	r21, r13
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a0 e0       	ldi	r26, 0x00	; 0
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e6 14       	cp	r14, r6
     fce:	f7 04       	cpc	r15, r7
     fd0:	08 05       	cpc	r16, r8
     fd2:	19 05       	cpc	r17, r9
     fd4:	20 f4       	brcc	.+8      	; 0xfde <__mulsf3+0xe8>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a0 e0       	ldi	r26, 0x00	; 0
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	ba 01       	movw	r22, r20
     fe0:	a9 01       	movw	r20, r18
     fe2:	48 0f       	add	r20, r24
     fe4:	59 1f       	adc	r21, r25
     fe6:	6a 1f       	adc	r22, r26
     fe8:	7b 1f       	adc	r23, r27
     fea:	aa 0c       	add	r10, r10
     fec:	bb 1c       	adc	r11, r11
     fee:	cc 1c       	adc	r12, r12
     ff0:	dd 1c       	adc	r13, r13
     ff2:	97 fe       	sbrs	r9, 7
     ff4:	08 c0       	rjmp	.+16     	; 0x1006 <__mulsf3+0x110>
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a0 e0       	ldi	r26, 0x00	; 0
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	a8 2a       	or	r10, r24
    1000:	b9 2a       	or	r11, r25
    1002:	ca 2a       	or	r12, r26
    1004:	db 2a       	or	r13, r27
    1006:	31 96       	adiw	r30, 0x01	; 1
    1008:	e0 32       	cpi	r30, 0x20	; 32
    100a:	f1 05       	cpc	r31, r1
    100c:	49 f0       	breq	.+18     	; 0x1020 <__mulsf3+0x12a>
    100e:	66 0c       	add	r6, r6
    1010:	77 1c       	adc	r7, r7
    1012:	88 1c       	adc	r8, r8
    1014:	99 1c       	adc	r9, r9
    1016:	56 94       	lsr	r5
    1018:	47 94       	ror	r4
    101a:	37 94       	ror	r3
    101c:	27 94       	ror	r2
    101e:	c3 cf       	rjmp	.-122    	; 0xfa6 <__mulsf3+0xb0>
    1020:	fa 85       	ldd	r31, Y+10	; 0x0a
    1022:	ea 89       	ldd	r30, Y+18	; 0x12
    1024:	2b 89       	ldd	r18, Y+19	; 0x13
    1026:	3c 89       	ldd	r19, Y+20	; 0x14
    1028:	8b 85       	ldd	r24, Y+11	; 0x0b
    102a:	9c 85       	ldd	r25, Y+12	; 0x0c
    102c:	28 0f       	add	r18, r24
    102e:	39 1f       	adc	r19, r25
    1030:	2e 5f       	subi	r18, 0xFE	; 254
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	17 c0       	rjmp	.+46     	; 0x1064 <__mulsf3+0x16e>
    1036:	ca 01       	movw	r24, r20
    1038:	81 70       	andi	r24, 0x01	; 1
    103a:	90 70       	andi	r25, 0x00	; 0
    103c:	89 2b       	or	r24, r25
    103e:	61 f0       	breq	.+24     	; 0x1058 <__mulsf3+0x162>
    1040:	16 95       	lsr	r17
    1042:	07 95       	ror	r16
    1044:	f7 94       	ror	r15
    1046:	e7 94       	ror	r14
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	a0 e0       	ldi	r26, 0x00	; 0
    104e:	b0 e8       	ldi	r27, 0x80	; 128
    1050:	e8 2a       	or	r14, r24
    1052:	f9 2a       	or	r15, r25
    1054:	0a 2b       	or	r16, r26
    1056:	1b 2b       	or	r17, r27
    1058:	76 95       	lsr	r23
    105a:	67 95       	ror	r22
    105c:	57 95       	ror	r21
    105e:	47 95       	ror	r20
    1060:	2f 5f       	subi	r18, 0xFF	; 255
    1062:	3f 4f       	sbci	r19, 0xFF	; 255
    1064:	77 fd       	sbrc	r23, 7
    1066:	e7 cf       	rjmp	.-50     	; 0x1036 <__mulsf3+0x140>
    1068:	0c c0       	rjmp	.+24     	; 0x1082 <__mulsf3+0x18c>
    106a:	44 0f       	add	r20, r20
    106c:	55 1f       	adc	r21, r21
    106e:	66 1f       	adc	r22, r22
    1070:	77 1f       	adc	r23, r23
    1072:	17 fd       	sbrc	r17, 7
    1074:	41 60       	ori	r20, 0x01	; 1
    1076:	ee 0c       	add	r14, r14
    1078:	ff 1c       	adc	r15, r15
    107a:	00 1f       	adc	r16, r16
    107c:	11 1f       	adc	r17, r17
    107e:	21 50       	subi	r18, 0x01	; 1
    1080:	30 40       	sbci	r19, 0x00	; 0
    1082:	40 30       	cpi	r20, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	59 07       	cpc	r21, r25
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	69 07       	cpc	r22, r25
    108c:	90 e4       	ldi	r25, 0x40	; 64
    108e:	79 07       	cpc	r23, r25
    1090:	60 f3       	brcs	.-40     	; 0x106a <__mulsf3+0x174>
    1092:	2b 8f       	std	Y+27, r18	; 0x1b
    1094:	3c 8f       	std	Y+28, r19	; 0x1c
    1096:	db 01       	movw	r26, r22
    1098:	ca 01       	movw	r24, r20
    109a:	8f 77       	andi	r24, 0x7F	; 127
    109c:	90 70       	andi	r25, 0x00	; 0
    109e:	a0 70       	andi	r26, 0x00	; 0
    10a0:	b0 70       	andi	r27, 0x00	; 0
    10a2:	80 34       	cpi	r24, 0x40	; 64
    10a4:	91 05       	cpc	r25, r1
    10a6:	a1 05       	cpc	r26, r1
    10a8:	b1 05       	cpc	r27, r1
    10aa:	61 f4       	brne	.+24     	; 0x10c4 <__mulsf3+0x1ce>
    10ac:	47 fd       	sbrc	r20, 7
    10ae:	0a c0       	rjmp	.+20     	; 0x10c4 <__mulsf3+0x1ce>
    10b0:	e1 14       	cp	r14, r1
    10b2:	f1 04       	cpc	r15, r1
    10b4:	01 05       	cpc	r16, r1
    10b6:	11 05       	cpc	r17, r1
    10b8:	29 f0       	breq	.+10     	; 0x10c4 <__mulsf3+0x1ce>
    10ba:	40 5c       	subi	r20, 0xC0	; 192
    10bc:	5f 4f       	sbci	r21, 0xFF	; 255
    10be:	6f 4f       	sbci	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	40 78       	andi	r20, 0x80	; 128
    10c4:	1a 8e       	std	Y+26, r1	; 0x1a
    10c6:	fe 17       	cp	r31, r30
    10c8:	11 f0       	breq	.+4      	; 0x10ce <__mulsf3+0x1d8>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	8a 8f       	std	Y+26, r24	; 0x1a
    10ce:	4d 8f       	std	Y+29, r20	; 0x1d
    10d0:	5e 8f       	std	Y+30, r21	; 0x1e
    10d2:	6f 8f       	std	Y+31, r22	; 0x1f
    10d4:	78 a3       	std	Y+32, r23	; 0x20
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	89 8f       	std	Y+25, r24	; 0x19
    10da:	ce 01       	movw	r24, r28
    10dc:	49 96       	adiw	r24, 0x19	; 25
    10de:	0e 94 05 0a 	call	0x140a	; 0x140a <__pack_f>
    10e2:	a0 96       	adiw	r28, 0x20	; 32
    10e4:	e2 e1       	ldi	r30, 0x12	; 18
    10e6:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__epilogue_restores__>

000010ea <__divsf3>:
    10ea:	a8 e1       	ldi	r26, 0x18	; 24
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	eb e7       	ldi	r30, 0x7B	; 123
    10f0:	f8 e0       	ldi	r31, 0x08	; 8
    10f2:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <__prologue_saves__+0x10>
    10f6:	69 83       	std	Y+1, r22	; 0x01
    10f8:	7a 83       	std	Y+2, r23	; 0x02
    10fa:	8b 83       	std	Y+3, r24	; 0x03
    10fc:	9c 83       	std	Y+4, r25	; 0x04
    10fe:	2d 83       	std	Y+5, r18	; 0x05
    1100:	3e 83       	std	Y+6, r19	; 0x06
    1102:	4f 83       	std	Y+7, r20	; 0x07
    1104:	58 87       	std	Y+8, r21	; 0x08
    1106:	b9 e0       	ldi	r27, 0x09	; 9
    1108:	eb 2e       	mov	r14, r27
    110a:	f1 2c       	mov	r15, r1
    110c:	ec 0e       	add	r14, r28
    110e:	fd 1e       	adc	r15, r29
    1110:	ce 01       	movw	r24, r28
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	b7 01       	movw	r22, r14
    1116:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
    111a:	8e 01       	movw	r16, r28
    111c:	0f 5e       	subi	r16, 0xEF	; 239
    111e:	1f 4f       	sbci	r17, 0xFF	; 255
    1120:	ce 01       	movw	r24, r28
    1122:	05 96       	adiw	r24, 0x05	; 5
    1124:	b8 01       	movw	r22, r16
    1126:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
    112a:	29 85       	ldd	r18, Y+9	; 0x09
    112c:	22 30       	cpi	r18, 0x02	; 2
    112e:	08 f4       	brcc	.+2      	; 0x1132 <__divsf3+0x48>
    1130:	7e c0       	rjmp	.+252    	; 0x122e <__divsf3+0x144>
    1132:	39 89       	ldd	r19, Y+17	; 0x11
    1134:	32 30       	cpi	r19, 0x02	; 2
    1136:	10 f4       	brcc	.+4      	; 0x113c <__divsf3+0x52>
    1138:	b8 01       	movw	r22, r16
    113a:	7c c0       	rjmp	.+248    	; 0x1234 <__divsf3+0x14a>
    113c:	8a 85       	ldd	r24, Y+10	; 0x0a
    113e:	9a 89       	ldd	r25, Y+18	; 0x12
    1140:	89 27       	eor	r24, r25
    1142:	8a 87       	std	Y+10, r24	; 0x0a
    1144:	24 30       	cpi	r18, 0x04	; 4
    1146:	11 f0       	breq	.+4      	; 0x114c <__divsf3+0x62>
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 f4       	brne	.+12     	; 0x1158 <__divsf3+0x6e>
    114c:	23 17       	cp	r18, r19
    114e:	09 f0       	breq	.+2      	; 0x1152 <__divsf3+0x68>
    1150:	6e c0       	rjmp	.+220    	; 0x122e <__divsf3+0x144>
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	72 e0       	ldi	r23, 0x02	; 2
    1156:	6e c0       	rjmp	.+220    	; 0x1234 <__divsf3+0x14a>
    1158:	34 30       	cpi	r19, 0x04	; 4
    115a:	39 f4       	brne	.+14     	; 0x116a <__divsf3+0x80>
    115c:	1d 86       	std	Y+13, r1	; 0x0d
    115e:	1e 86       	std	Y+14, r1	; 0x0e
    1160:	1f 86       	std	Y+15, r1	; 0x0f
    1162:	18 8a       	std	Y+16, r1	; 0x10
    1164:	1c 86       	std	Y+12, r1	; 0x0c
    1166:	1b 86       	std	Y+11, r1	; 0x0b
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <__divsf3+0x88>
    116a:	32 30       	cpi	r19, 0x02	; 2
    116c:	21 f4       	brne	.+8      	; 0x1176 <__divsf3+0x8c>
    116e:	84 e0       	ldi	r24, 0x04	; 4
    1170:	89 87       	std	Y+9, r24	; 0x09
    1172:	b7 01       	movw	r22, r14
    1174:	5f c0       	rjmp	.+190    	; 0x1234 <__divsf3+0x14a>
    1176:	2b 85       	ldd	r18, Y+11	; 0x0b
    1178:	3c 85       	ldd	r19, Y+12	; 0x0c
    117a:	8b 89       	ldd	r24, Y+19	; 0x13
    117c:	9c 89       	ldd	r25, Y+20	; 0x14
    117e:	28 1b       	sub	r18, r24
    1180:	39 0b       	sbc	r19, r25
    1182:	3c 87       	std	Y+12, r19	; 0x0c
    1184:	2b 87       	std	Y+11, r18	; 0x0b
    1186:	ed 84       	ldd	r14, Y+13	; 0x0d
    1188:	fe 84       	ldd	r15, Y+14	; 0x0e
    118a:	0f 85       	ldd	r16, Y+15	; 0x0f
    118c:	18 89       	ldd	r17, Y+16	; 0x10
    118e:	ad 88       	ldd	r10, Y+21	; 0x15
    1190:	be 88       	ldd	r11, Y+22	; 0x16
    1192:	cf 88       	ldd	r12, Y+23	; 0x17
    1194:	d8 8c       	ldd	r13, Y+24	; 0x18
    1196:	ea 14       	cp	r14, r10
    1198:	fb 04       	cpc	r15, r11
    119a:	0c 05       	cpc	r16, r12
    119c:	1d 05       	cpc	r17, r13
    119e:	40 f4       	brcc	.+16     	; 0x11b0 <__divsf3+0xc6>
    11a0:	ee 0c       	add	r14, r14
    11a2:	ff 1c       	adc	r15, r15
    11a4:	00 1f       	adc	r16, r16
    11a6:	11 1f       	adc	r17, r17
    11a8:	21 50       	subi	r18, 0x01	; 1
    11aa:	30 40       	sbci	r19, 0x00	; 0
    11ac:	3c 87       	std	Y+12, r19	; 0x0c
    11ae:	2b 87       	std	Y+11, r18	; 0x0b
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a0 e0       	ldi	r26, 0x00	; 0
    11be:	b0 e4       	ldi	r27, 0x40	; 64
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	ea 14       	cp	r14, r10
    11c6:	fb 04       	cpc	r15, r11
    11c8:	0c 05       	cpc	r16, r12
    11ca:	1d 05       	cpc	r17, r13
    11cc:	40 f0       	brcs	.+16     	; 0x11de <__divsf3+0xf4>
    11ce:	28 2b       	or	r18, r24
    11d0:	39 2b       	or	r19, r25
    11d2:	4a 2b       	or	r20, r26
    11d4:	5b 2b       	or	r21, r27
    11d6:	ea 18       	sub	r14, r10
    11d8:	fb 08       	sbc	r15, r11
    11da:	0c 09       	sbc	r16, r12
    11dc:	1d 09       	sbc	r17, r13
    11de:	b6 95       	lsr	r27
    11e0:	a7 95       	ror	r26
    11e2:	97 95       	ror	r25
    11e4:	87 95       	ror	r24
    11e6:	ee 0c       	add	r14, r14
    11e8:	ff 1c       	adc	r15, r15
    11ea:	00 1f       	adc	r16, r16
    11ec:	11 1f       	adc	r17, r17
    11ee:	6f 5f       	subi	r22, 0xFF	; 255
    11f0:	7f 4f       	sbci	r23, 0xFF	; 255
    11f2:	6f 31       	cpi	r22, 0x1F	; 31
    11f4:	71 05       	cpc	r23, r1
    11f6:	31 f7       	brne	.-52     	; 0x11c4 <__divsf3+0xda>
    11f8:	da 01       	movw	r26, r20
    11fa:	c9 01       	movw	r24, r18
    11fc:	8f 77       	andi	r24, 0x7F	; 127
    11fe:	90 70       	andi	r25, 0x00	; 0
    1200:	a0 70       	andi	r26, 0x00	; 0
    1202:	b0 70       	andi	r27, 0x00	; 0
    1204:	80 34       	cpi	r24, 0x40	; 64
    1206:	91 05       	cpc	r25, r1
    1208:	a1 05       	cpc	r26, r1
    120a:	b1 05       	cpc	r27, r1
    120c:	61 f4       	brne	.+24     	; 0x1226 <__divsf3+0x13c>
    120e:	27 fd       	sbrc	r18, 7
    1210:	0a c0       	rjmp	.+20     	; 0x1226 <__divsf3+0x13c>
    1212:	e1 14       	cp	r14, r1
    1214:	f1 04       	cpc	r15, r1
    1216:	01 05       	cpc	r16, r1
    1218:	11 05       	cpc	r17, r1
    121a:	29 f0       	breq	.+10     	; 0x1226 <__divsf3+0x13c>
    121c:	20 5c       	subi	r18, 0xC0	; 192
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	4f 4f       	sbci	r20, 0xFF	; 255
    1222:	5f 4f       	sbci	r21, 0xFF	; 255
    1224:	20 78       	andi	r18, 0x80	; 128
    1226:	2d 87       	std	Y+13, r18	; 0x0d
    1228:	3e 87       	std	Y+14, r19	; 0x0e
    122a:	4f 87       	std	Y+15, r20	; 0x0f
    122c:	58 8b       	std	Y+16, r21	; 0x10
    122e:	be 01       	movw	r22, r28
    1230:	67 5f       	subi	r22, 0xF7	; 247
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	cb 01       	movw	r24, r22
    1236:	0e 94 05 0a 	call	0x140a	; 0x140a <__pack_f>
    123a:	68 96       	adiw	r28, 0x18	; 24
    123c:	ea e0       	ldi	r30, 0x0A	; 10
    123e:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__epilogue_restores__+0x10>

00001242 <__gtsf2>:
    1242:	a8 e1       	ldi	r26, 0x18	; 24
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e7 e2       	ldi	r30, 0x27	; 39
    1248:	f9 e0       	ldi	r31, 0x09	; 9
    124a:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__prologue_saves__+0x18>
    124e:	69 83       	std	Y+1, r22	; 0x01
    1250:	7a 83       	std	Y+2, r23	; 0x02
    1252:	8b 83       	std	Y+3, r24	; 0x03
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	2d 83       	std	Y+5, r18	; 0x05
    1258:	3e 83       	std	Y+6, r19	; 0x06
    125a:	4f 83       	std	Y+7, r20	; 0x07
    125c:	58 87       	std	Y+8, r21	; 0x08
    125e:	89 e0       	ldi	r24, 0x09	; 9
    1260:	e8 2e       	mov	r14, r24
    1262:	f1 2c       	mov	r15, r1
    1264:	ec 0e       	add	r14, r28
    1266:	fd 1e       	adc	r15, r29
    1268:	ce 01       	movw	r24, r28
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	b7 01       	movw	r22, r14
    126e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
    1272:	8e 01       	movw	r16, r28
    1274:	0f 5e       	subi	r16, 0xEF	; 239
    1276:	1f 4f       	sbci	r17, 0xFF	; 255
    1278:	ce 01       	movw	r24, r28
    127a:	05 96       	adiw	r24, 0x05	; 5
    127c:	b8 01       	movw	r22, r16
    127e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
    1282:	89 85       	ldd	r24, Y+9	; 0x09
    1284:	82 30       	cpi	r24, 0x02	; 2
    1286:	40 f0       	brcs	.+16     	; 0x1298 <__gtsf2+0x56>
    1288:	89 89       	ldd	r24, Y+17	; 0x11
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	28 f0       	brcs	.+10     	; 0x1298 <__gtsf2+0x56>
    128e:	c7 01       	movw	r24, r14
    1290:	b8 01       	movw	r22, r16
    1292:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fpcmp_parts_f>
    1296:	01 c0       	rjmp	.+2      	; 0x129a <__gtsf2+0x58>
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	68 96       	adiw	r28, 0x18	; 24
    129c:	e6 e0       	ldi	r30, 0x06	; 6
    129e:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__epilogue_restores__+0x18>

000012a2 <__gesf2>:
    12a2:	a8 e1       	ldi	r26, 0x18	; 24
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e7 e5       	ldi	r30, 0x57	; 87
    12a8:	f9 e0       	ldi	r31, 0x09	; 9
    12aa:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__prologue_saves__+0x18>
    12ae:	69 83       	std	Y+1, r22	; 0x01
    12b0:	7a 83       	std	Y+2, r23	; 0x02
    12b2:	8b 83       	std	Y+3, r24	; 0x03
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	2d 83       	std	Y+5, r18	; 0x05
    12b8:	3e 83       	std	Y+6, r19	; 0x06
    12ba:	4f 83       	std	Y+7, r20	; 0x07
    12bc:	58 87       	std	Y+8, r21	; 0x08
    12be:	89 e0       	ldi	r24, 0x09	; 9
    12c0:	e8 2e       	mov	r14, r24
    12c2:	f1 2c       	mov	r15, r1
    12c4:	ec 0e       	add	r14, r28
    12c6:	fd 1e       	adc	r15, r29
    12c8:	ce 01       	movw	r24, r28
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	b7 01       	movw	r22, r14
    12ce:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
    12d2:	8e 01       	movw	r16, r28
    12d4:	0f 5e       	subi	r16, 0xEF	; 239
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	ce 01       	movw	r24, r28
    12da:	05 96       	adiw	r24, 0x05	; 5
    12dc:	b8 01       	movw	r22, r16
    12de:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
    12e2:	89 85       	ldd	r24, Y+9	; 0x09
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	40 f0       	brcs	.+16     	; 0x12f8 <__gesf2+0x56>
    12e8:	89 89       	ldd	r24, Y+17	; 0x11
    12ea:	82 30       	cpi	r24, 0x02	; 2
    12ec:	28 f0       	brcs	.+10     	; 0x12f8 <__gesf2+0x56>
    12ee:	c7 01       	movw	r24, r14
    12f0:	b8 01       	movw	r22, r16
    12f2:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fpcmp_parts_f>
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <__gesf2+0x58>
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	68 96       	adiw	r28, 0x18	; 24
    12fc:	e6 e0       	ldi	r30, 0x06	; 6
    12fe:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__epilogue_restores__+0x18>

00001302 <__ltsf2>:
    1302:	a8 e1       	ldi	r26, 0x18	; 24
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e7 e8       	ldi	r30, 0x87	; 135
    1308:	f9 e0       	ldi	r31, 0x09	; 9
    130a:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__prologue_saves__+0x18>
    130e:	69 83       	std	Y+1, r22	; 0x01
    1310:	7a 83       	std	Y+2, r23	; 0x02
    1312:	8b 83       	std	Y+3, r24	; 0x03
    1314:	9c 83       	std	Y+4, r25	; 0x04
    1316:	2d 83       	std	Y+5, r18	; 0x05
    1318:	3e 83       	std	Y+6, r19	; 0x06
    131a:	4f 83       	std	Y+7, r20	; 0x07
    131c:	58 87       	std	Y+8, r21	; 0x08
    131e:	89 e0       	ldi	r24, 0x09	; 9
    1320:	e8 2e       	mov	r14, r24
    1322:	f1 2c       	mov	r15, r1
    1324:	ec 0e       	add	r14, r28
    1326:	fd 1e       	adc	r15, r29
    1328:	ce 01       	movw	r24, r28
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	b7 01       	movw	r22, r14
    132e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
    1332:	8e 01       	movw	r16, r28
    1334:	0f 5e       	subi	r16, 0xEF	; 239
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	ce 01       	movw	r24, r28
    133a:	05 96       	adiw	r24, 0x05	; 5
    133c:	b8 01       	movw	r22, r16
    133e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
    1342:	89 85       	ldd	r24, Y+9	; 0x09
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	40 f0       	brcs	.+16     	; 0x1358 <__ltsf2+0x56>
    1348:	89 89       	ldd	r24, Y+17	; 0x11
    134a:	82 30       	cpi	r24, 0x02	; 2
    134c:	28 f0       	brcs	.+10     	; 0x1358 <__ltsf2+0x56>
    134e:	c7 01       	movw	r24, r14
    1350:	b8 01       	movw	r22, r16
    1352:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fpcmp_parts_f>
    1356:	01 c0       	rjmp	.+2      	; 0x135a <__ltsf2+0x58>
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	68 96       	adiw	r28, 0x18	; 24
    135c:	e6 e0       	ldi	r30, 0x06	; 6
    135e:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__epilogue_restores__+0x18>

00001362 <__fixsfsi>:
    1362:	ac e0       	ldi	r26, 0x0C	; 12
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e7 eb       	ldi	r30, 0xB7	; 183
    1368:	f9 e0       	ldi	r31, 0x09	; 9
    136a:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__prologue_saves__+0x20>
    136e:	69 83       	std	Y+1, r22	; 0x01
    1370:	7a 83       	std	Y+2, r23	; 0x02
    1372:	8b 83       	std	Y+3, r24	; 0x03
    1374:	9c 83       	std	Y+4, r25	; 0x04
    1376:	ce 01       	movw	r24, r28
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	be 01       	movw	r22, r28
    137c:	6b 5f       	subi	r22, 0xFB	; 251
    137e:	7f 4f       	sbci	r23, 0xFF	; 255
    1380:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__unpack_f>
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	61 f1       	breq	.+88     	; 0x13e2 <__fixsfsi+0x80>
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	50 f1       	brcs	.+84     	; 0x13e2 <__fixsfsi+0x80>
    138e:	84 30       	cpi	r24, 0x04	; 4
    1390:	21 f4       	brne	.+8      	; 0x139a <__fixsfsi+0x38>
    1392:	8e 81       	ldd	r24, Y+6	; 0x06
    1394:	88 23       	and	r24, r24
    1396:	51 f1       	breq	.+84     	; 0x13ec <__fixsfsi+0x8a>
    1398:	2e c0       	rjmp	.+92     	; 0x13f6 <__fixsfsi+0x94>
    139a:	2f 81       	ldd	r18, Y+7	; 0x07
    139c:	38 85       	ldd	r19, Y+8	; 0x08
    139e:	37 fd       	sbrc	r19, 7
    13a0:	20 c0       	rjmp	.+64     	; 0x13e2 <__fixsfsi+0x80>
    13a2:	6e 81       	ldd	r22, Y+6	; 0x06
    13a4:	2f 31       	cpi	r18, 0x1F	; 31
    13a6:	31 05       	cpc	r19, r1
    13a8:	1c f0       	brlt	.+6      	; 0x13b0 <__fixsfsi+0x4e>
    13aa:	66 23       	and	r22, r22
    13ac:	f9 f0       	breq	.+62     	; 0x13ec <__fixsfsi+0x8a>
    13ae:	23 c0       	rjmp	.+70     	; 0x13f6 <__fixsfsi+0x94>
    13b0:	8e e1       	ldi	r24, 0x1E	; 30
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	82 1b       	sub	r24, r18
    13b6:	93 0b       	sbc	r25, r19
    13b8:	29 85       	ldd	r18, Y+9	; 0x09
    13ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    13bc:	4b 85       	ldd	r20, Y+11	; 0x0b
    13be:	5c 85       	ldd	r21, Y+12	; 0x0c
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <__fixsfsi+0x68>
    13c2:	56 95       	lsr	r21
    13c4:	47 95       	ror	r20
    13c6:	37 95       	ror	r19
    13c8:	27 95       	ror	r18
    13ca:	8a 95       	dec	r24
    13cc:	d2 f7       	brpl	.-12     	; 0x13c2 <__fixsfsi+0x60>
    13ce:	66 23       	and	r22, r22
    13d0:	b1 f0       	breq	.+44     	; 0x13fe <__fixsfsi+0x9c>
    13d2:	50 95       	com	r21
    13d4:	40 95       	com	r20
    13d6:	30 95       	com	r19
    13d8:	21 95       	neg	r18
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	4f 4f       	sbci	r20, 0xFF	; 255
    13de:	5f 4f       	sbci	r21, 0xFF	; 255
    13e0:	0e c0       	rjmp	.+28     	; 0x13fe <__fixsfsi+0x9c>
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	09 c0       	rjmp	.+18     	; 0x13fe <__fixsfsi+0x9c>
    13ec:	2f ef       	ldi	r18, 0xFF	; 255
    13ee:	3f ef       	ldi	r19, 0xFF	; 255
    13f0:	4f ef       	ldi	r20, 0xFF	; 255
    13f2:	5f e7       	ldi	r21, 0x7F	; 127
    13f4:	04 c0       	rjmp	.+8      	; 0x13fe <__fixsfsi+0x9c>
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	50 e8       	ldi	r21, 0x80	; 128
    13fe:	b9 01       	movw	r22, r18
    1400:	ca 01       	movw	r24, r20
    1402:	2c 96       	adiw	r28, 0x0c	; 12
    1404:	e2 e0       	ldi	r30, 0x02	; 2
    1406:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__epilogue_restores__+0x20>

0000140a <__pack_f>:
    140a:	df 92       	push	r13
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	fc 01       	movw	r30, r24
    1416:	e4 80       	ldd	r14, Z+4	; 0x04
    1418:	f5 80       	ldd	r15, Z+5	; 0x05
    141a:	06 81       	ldd	r16, Z+6	; 0x06
    141c:	17 81       	ldd	r17, Z+7	; 0x07
    141e:	d1 80       	ldd	r13, Z+1	; 0x01
    1420:	80 81       	ld	r24, Z
    1422:	82 30       	cpi	r24, 0x02	; 2
    1424:	48 f4       	brcc	.+18     	; 0x1438 <__pack_f+0x2e>
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a0 e1       	ldi	r26, 0x10	; 16
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e8 2a       	or	r14, r24
    1430:	f9 2a       	or	r15, r25
    1432:	0a 2b       	or	r16, r26
    1434:	1b 2b       	or	r17, r27
    1436:	a5 c0       	rjmp	.+330    	; 0x1582 <__pack_f+0x178>
    1438:	84 30       	cpi	r24, 0x04	; 4
    143a:	09 f4       	brne	.+2      	; 0x143e <__pack_f+0x34>
    143c:	9f c0       	rjmp	.+318    	; 0x157c <__pack_f+0x172>
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	21 f4       	brne	.+8      	; 0x144a <__pack_f+0x40>
    1442:	ee 24       	eor	r14, r14
    1444:	ff 24       	eor	r15, r15
    1446:	87 01       	movw	r16, r14
    1448:	05 c0       	rjmp	.+10     	; 0x1454 <__pack_f+0x4a>
    144a:	e1 14       	cp	r14, r1
    144c:	f1 04       	cpc	r15, r1
    144e:	01 05       	cpc	r16, r1
    1450:	11 05       	cpc	r17, r1
    1452:	19 f4       	brne	.+6      	; 0x145a <__pack_f+0x50>
    1454:	e0 e0       	ldi	r30, 0x00	; 0
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	96 c0       	rjmp	.+300    	; 0x1586 <__pack_f+0x17c>
    145a:	62 81       	ldd	r22, Z+2	; 0x02
    145c:	73 81       	ldd	r23, Z+3	; 0x03
    145e:	9f ef       	ldi	r25, 0xFF	; 255
    1460:	62 38       	cpi	r22, 0x82	; 130
    1462:	79 07       	cpc	r23, r25
    1464:	0c f0       	brlt	.+2      	; 0x1468 <__pack_f+0x5e>
    1466:	5b c0       	rjmp	.+182    	; 0x151e <__pack_f+0x114>
    1468:	22 e8       	ldi	r18, 0x82	; 130
    146a:	3f ef       	ldi	r19, 0xFF	; 255
    146c:	26 1b       	sub	r18, r22
    146e:	37 0b       	sbc	r19, r23
    1470:	2a 31       	cpi	r18, 0x1A	; 26
    1472:	31 05       	cpc	r19, r1
    1474:	2c f0       	brlt	.+10     	; 0x1480 <__pack_f+0x76>
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	2a c0       	rjmp	.+84     	; 0x14d4 <__pack_f+0xca>
    1480:	b8 01       	movw	r22, r16
    1482:	a7 01       	movw	r20, r14
    1484:	02 2e       	mov	r0, r18
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <__pack_f+0x86>
    1488:	76 95       	lsr	r23
    148a:	67 95       	ror	r22
    148c:	57 95       	ror	r21
    148e:	47 95       	ror	r20
    1490:	0a 94       	dec	r0
    1492:	d2 f7       	brpl	.-12     	; 0x1488 <__pack_f+0x7e>
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a0 e0       	ldi	r26, 0x00	; 0
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <__pack_f+0x9c>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	aa 1f       	adc	r26, r26
    14a4:	bb 1f       	adc	r27, r27
    14a6:	2a 95       	dec	r18
    14a8:	d2 f7       	brpl	.-12     	; 0x149e <__pack_f+0x94>
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	a1 09       	sbc	r26, r1
    14ae:	b1 09       	sbc	r27, r1
    14b0:	8e 21       	and	r24, r14
    14b2:	9f 21       	and	r25, r15
    14b4:	a0 23       	and	r26, r16
    14b6:	b1 23       	and	r27, r17
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	a1 05       	cpc	r26, r1
    14bc:	b1 05       	cpc	r27, r1
    14be:	21 f0       	breq	.+8      	; 0x14c8 <__pack_f+0xbe>
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a0 e0       	ldi	r26, 0x00	; 0
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	9a 01       	movw	r18, r20
    14ca:	ab 01       	movw	r20, r22
    14cc:	28 2b       	or	r18, r24
    14ce:	39 2b       	or	r19, r25
    14d0:	4a 2b       	or	r20, r26
    14d2:	5b 2b       	or	r21, r27
    14d4:	da 01       	movw	r26, r20
    14d6:	c9 01       	movw	r24, r18
    14d8:	8f 77       	andi	r24, 0x7F	; 127
    14da:	90 70       	andi	r25, 0x00	; 0
    14dc:	a0 70       	andi	r26, 0x00	; 0
    14de:	b0 70       	andi	r27, 0x00	; 0
    14e0:	80 34       	cpi	r24, 0x40	; 64
    14e2:	91 05       	cpc	r25, r1
    14e4:	a1 05       	cpc	r26, r1
    14e6:	b1 05       	cpc	r27, r1
    14e8:	39 f4       	brne	.+14     	; 0x14f8 <__pack_f+0xee>
    14ea:	27 ff       	sbrs	r18, 7
    14ec:	09 c0       	rjmp	.+18     	; 0x1500 <__pack_f+0xf6>
    14ee:	20 5c       	subi	r18, 0xC0	; 192
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	4f 4f       	sbci	r20, 0xFF	; 255
    14f4:	5f 4f       	sbci	r21, 0xFF	; 255
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <__pack_f+0xf6>
    14f8:	21 5c       	subi	r18, 0xC1	; 193
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
    14fc:	4f 4f       	sbci	r20, 0xFF	; 255
    14fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1500:	e0 e0       	ldi	r30, 0x00	; 0
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	20 30       	cpi	r18, 0x00	; 0
    1506:	a0 e0       	ldi	r26, 0x00	; 0
    1508:	3a 07       	cpc	r19, r26
    150a:	a0 e0       	ldi	r26, 0x00	; 0
    150c:	4a 07       	cpc	r20, r26
    150e:	a0 e4       	ldi	r26, 0x40	; 64
    1510:	5a 07       	cpc	r21, r26
    1512:	10 f0       	brcs	.+4      	; 0x1518 <__pack_f+0x10e>
    1514:	e1 e0       	ldi	r30, 0x01	; 1
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	79 01       	movw	r14, r18
    151a:	8a 01       	movw	r16, r20
    151c:	27 c0       	rjmp	.+78     	; 0x156c <__pack_f+0x162>
    151e:	60 38       	cpi	r22, 0x80	; 128
    1520:	71 05       	cpc	r23, r1
    1522:	64 f5       	brge	.+88     	; 0x157c <__pack_f+0x172>
    1524:	fb 01       	movw	r30, r22
    1526:	e1 58       	subi	r30, 0x81	; 129
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	d8 01       	movw	r26, r16
    152c:	c7 01       	movw	r24, r14
    152e:	8f 77       	andi	r24, 0x7F	; 127
    1530:	90 70       	andi	r25, 0x00	; 0
    1532:	a0 70       	andi	r26, 0x00	; 0
    1534:	b0 70       	andi	r27, 0x00	; 0
    1536:	80 34       	cpi	r24, 0x40	; 64
    1538:	91 05       	cpc	r25, r1
    153a:	a1 05       	cpc	r26, r1
    153c:	b1 05       	cpc	r27, r1
    153e:	39 f4       	brne	.+14     	; 0x154e <__pack_f+0x144>
    1540:	e7 fe       	sbrs	r14, 7
    1542:	0d c0       	rjmp	.+26     	; 0x155e <__pack_f+0x154>
    1544:	80 e4       	ldi	r24, 0x40	; 64
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a0 e0       	ldi	r26, 0x00	; 0
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <__pack_f+0x14c>
    154e:	8f e3       	ldi	r24, 0x3F	; 63
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a0 e0       	ldi	r26, 0x00	; 0
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e8 0e       	add	r14, r24
    1558:	f9 1e       	adc	r15, r25
    155a:	0a 1f       	adc	r16, r26
    155c:	1b 1f       	adc	r17, r27
    155e:	17 ff       	sbrs	r17, 7
    1560:	05 c0       	rjmp	.+10     	; 0x156c <__pack_f+0x162>
    1562:	16 95       	lsr	r17
    1564:	07 95       	ror	r16
    1566:	f7 94       	ror	r15
    1568:	e7 94       	ror	r14
    156a:	31 96       	adiw	r30, 0x01	; 1
    156c:	87 e0       	ldi	r24, 0x07	; 7
    156e:	16 95       	lsr	r17
    1570:	07 95       	ror	r16
    1572:	f7 94       	ror	r15
    1574:	e7 94       	ror	r14
    1576:	8a 95       	dec	r24
    1578:	d1 f7       	brne	.-12     	; 0x156e <__pack_f+0x164>
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <__pack_f+0x17c>
    157c:	ee 24       	eor	r14, r14
    157e:	ff 24       	eor	r15, r15
    1580:	87 01       	movw	r16, r14
    1582:	ef ef       	ldi	r30, 0xFF	; 255
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	6e 2f       	mov	r22, r30
    1588:	67 95       	ror	r22
    158a:	66 27       	eor	r22, r22
    158c:	67 95       	ror	r22
    158e:	90 2f       	mov	r25, r16
    1590:	9f 77       	andi	r25, 0x7F	; 127
    1592:	d7 94       	ror	r13
    1594:	dd 24       	eor	r13, r13
    1596:	d7 94       	ror	r13
    1598:	8e 2f       	mov	r24, r30
    159a:	86 95       	lsr	r24
    159c:	49 2f       	mov	r20, r25
    159e:	46 2b       	or	r20, r22
    15a0:	58 2f       	mov	r21, r24
    15a2:	5d 29       	or	r21, r13
    15a4:	b7 01       	movw	r22, r14
    15a6:	ca 01       	movw	r24, r20
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	ff 90       	pop	r15
    15ae:	ef 90       	pop	r14
    15b0:	df 90       	pop	r13
    15b2:	08 95       	ret

000015b4 <__unpack_f>:
    15b4:	fc 01       	movw	r30, r24
    15b6:	db 01       	movw	r26, r22
    15b8:	40 81       	ld	r20, Z
    15ba:	51 81       	ldd	r21, Z+1	; 0x01
    15bc:	22 81       	ldd	r18, Z+2	; 0x02
    15be:	62 2f       	mov	r22, r18
    15c0:	6f 77       	andi	r22, 0x7F	; 127
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	22 1f       	adc	r18, r18
    15c6:	22 27       	eor	r18, r18
    15c8:	22 1f       	adc	r18, r18
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	89 2f       	mov	r24, r25
    15ce:	88 0f       	add	r24, r24
    15d0:	82 2b       	or	r24, r18
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	99 1f       	adc	r25, r25
    15d8:	99 27       	eor	r25, r25
    15da:	99 1f       	adc	r25, r25
    15dc:	11 96       	adiw	r26, 0x01	; 1
    15de:	9c 93       	st	X, r25
    15e0:	11 97       	sbiw	r26, 0x01	; 1
    15e2:	21 15       	cp	r18, r1
    15e4:	31 05       	cpc	r19, r1
    15e6:	a9 f5       	brne	.+106    	; 0x1652 <__unpack_f+0x9e>
    15e8:	41 15       	cp	r20, r1
    15ea:	51 05       	cpc	r21, r1
    15ec:	61 05       	cpc	r22, r1
    15ee:	71 05       	cpc	r23, r1
    15f0:	11 f4       	brne	.+4      	; 0x15f6 <__unpack_f+0x42>
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	37 c0       	rjmp	.+110    	; 0x1664 <__unpack_f+0xb0>
    15f6:	82 e8       	ldi	r24, 0x82	; 130
    15f8:	9f ef       	ldi	r25, 0xFF	; 255
    15fa:	13 96       	adiw	r26, 0x03	; 3
    15fc:	9c 93       	st	X, r25
    15fe:	8e 93       	st	-X, r24
    1600:	12 97       	sbiw	r26, 0x02	; 2
    1602:	9a 01       	movw	r18, r20
    1604:	ab 01       	movw	r20, r22
    1606:	67 e0       	ldi	r22, 0x07	; 7
    1608:	22 0f       	add	r18, r18
    160a:	33 1f       	adc	r19, r19
    160c:	44 1f       	adc	r20, r20
    160e:	55 1f       	adc	r21, r21
    1610:	6a 95       	dec	r22
    1612:	d1 f7       	brne	.-12     	; 0x1608 <__unpack_f+0x54>
    1614:	83 e0       	ldi	r24, 0x03	; 3
    1616:	8c 93       	st	X, r24
    1618:	0d c0       	rjmp	.+26     	; 0x1634 <__unpack_f+0x80>
    161a:	22 0f       	add	r18, r18
    161c:	33 1f       	adc	r19, r19
    161e:	44 1f       	adc	r20, r20
    1620:	55 1f       	adc	r21, r21
    1622:	12 96       	adiw	r26, 0x02	; 2
    1624:	8d 91       	ld	r24, X+
    1626:	9c 91       	ld	r25, X
    1628:	13 97       	sbiw	r26, 0x03	; 3
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	13 96       	adiw	r26, 0x03	; 3
    162e:	9c 93       	st	X, r25
    1630:	8e 93       	st	-X, r24
    1632:	12 97       	sbiw	r26, 0x02	; 2
    1634:	20 30       	cpi	r18, 0x00	; 0
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	38 07       	cpc	r19, r24
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	48 07       	cpc	r20, r24
    163e:	80 e4       	ldi	r24, 0x40	; 64
    1640:	58 07       	cpc	r21, r24
    1642:	58 f3       	brcs	.-42     	; 0x161a <__unpack_f+0x66>
    1644:	14 96       	adiw	r26, 0x04	; 4
    1646:	2d 93       	st	X+, r18
    1648:	3d 93       	st	X+, r19
    164a:	4d 93       	st	X+, r20
    164c:	5c 93       	st	X, r21
    164e:	17 97       	sbiw	r26, 0x07	; 7
    1650:	08 95       	ret
    1652:	2f 3f       	cpi	r18, 0xFF	; 255
    1654:	31 05       	cpc	r19, r1
    1656:	79 f4       	brne	.+30     	; 0x1676 <__unpack_f+0xc2>
    1658:	41 15       	cp	r20, r1
    165a:	51 05       	cpc	r21, r1
    165c:	61 05       	cpc	r22, r1
    165e:	71 05       	cpc	r23, r1
    1660:	19 f4       	brne	.+6      	; 0x1668 <__unpack_f+0xb4>
    1662:	84 e0       	ldi	r24, 0x04	; 4
    1664:	8c 93       	st	X, r24
    1666:	08 95       	ret
    1668:	64 ff       	sbrs	r22, 4
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <__unpack_f+0xbe>
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	8c 93       	st	X, r24
    1670:	12 c0       	rjmp	.+36     	; 0x1696 <__unpack_f+0xe2>
    1672:	1c 92       	st	X, r1
    1674:	10 c0       	rjmp	.+32     	; 0x1696 <__unpack_f+0xe2>
    1676:	2f 57       	subi	r18, 0x7F	; 127
    1678:	30 40       	sbci	r19, 0x00	; 0
    167a:	13 96       	adiw	r26, 0x03	; 3
    167c:	3c 93       	st	X, r19
    167e:	2e 93       	st	-X, r18
    1680:	12 97       	sbiw	r26, 0x02	; 2
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	8c 93       	st	X, r24
    1686:	87 e0       	ldi	r24, 0x07	; 7
    1688:	44 0f       	add	r20, r20
    168a:	55 1f       	adc	r21, r21
    168c:	66 1f       	adc	r22, r22
    168e:	77 1f       	adc	r23, r23
    1690:	8a 95       	dec	r24
    1692:	d1 f7       	brne	.-12     	; 0x1688 <__unpack_f+0xd4>
    1694:	70 64       	ori	r23, 0x40	; 64
    1696:	14 96       	adiw	r26, 0x04	; 4
    1698:	4d 93       	st	X+, r20
    169a:	5d 93       	st	X+, r21
    169c:	6d 93       	st	X+, r22
    169e:	7c 93       	st	X, r23
    16a0:	17 97       	sbiw	r26, 0x07	; 7
    16a2:	08 95       	ret

000016a4 <__fpcmp_parts_f>:
    16a4:	1f 93       	push	r17
    16a6:	dc 01       	movw	r26, r24
    16a8:	fb 01       	movw	r30, r22
    16aa:	9c 91       	ld	r25, X
    16ac:	92 30       	cpi	r25, 0x02	; 2
    16ae:	08 f4       	brcc	.+2      	; 0x16b2 <__fpcmp_parts_f+0xe>
    16b0:	47 c0       	rjmp	.+142    	; 0x1740 <__fpcmp_parts_f+0x9c>
    16b2:	80 81       	ld	r24, Z
    16b4:	82 30       	cpi	r24, 0x02	; 2
    16b6:	08 f4       	brcc	.+2      	; 0x16ba <__fpcmp_parts_f+0x16>
    16b8:	43 c0       	rjmp	.+134    	; 0x1740 <__fpcmp_parts_f+0x9c>
    16ba:	94 30       	cpi	r25, 0x04	; 4
    16bc:	51 f4       	brne	.+20     	; 0x16d2 <__fpcmp_parts_f+0x2e>
    16be:	11 96       	adiw	r26, 0x01	; 1
    16c0:	1c 91       	ld	r17, X
    16c2:	84 30       	cpi	r24, 0x04	; 4
    16c4:	99 f5       	brne	.+102    	; 0x172c <__fpcmp_parts_f+0x88>
    16c6:	81 81       	ldd	r24, Z+1	; 0x01
    16c8:	68 2f       	mov	r22, r24
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	61 1b       	sub	r22, r17
    16ce:	71 09       	sbc	r23, r1
    16d0:	3f c0       	rjmp	.+126    	; 0x1750 <__fpcmp_parts_f+0xac>
    16d2:	84 30       	cpi	r24, 0x04	; 4
    16d4:	21 f0       	breq	.+8      	; 0x16de <__fpcmp_parts_f+0x3a>
    16d6:	92 30       	cpi	r25, 0x02	; 2
    16d8:	31 f4       	brne	.+12     	; 0x16e6 <__fpcmp_parts_f+0x42>
    16da:	82 30       	cpi	r24, 0x02	; 2
    16dc:	b9 f1       	breq	.+110    	; 0x174c <__fpcmp_parts_f+0xa8>
    16de:	81 81       	ldd	r24, Z+1	; 0x01
    16e0:	88 23       	and	r24, r24
    16e2:	89 f1       	breq	.+98     	; 0x1746 <__fpcmp_parts_f+0xa2>
    16e4:	2d c0       	rjmp	.+90     	; 0x1740 <__fpcmp_parts_f+0x9c>
    16e6:	11 96       	adiw	r26, 0x01	; 1
    16e8:	1c 91       	ld	r17, X
    16ea:	11 97       	sbiw	r26, 0x01	; 1
    16ec:	82 30       	cpi	r24, 0x02	; 2
    16ee:	f1 f0       	breq	.+60     	; 0x172c <__fpcmp_parts_f+0x88>
    16f0:	81 81       	ldd	r24, Z+1	; 0x01
    16f2:	18 17       	cp	r17, r24
    16f4:	d9 f4       	brne	.+54     	; 0x172c <__fpcmp_parts_f+0x88>
    16f6:	12 96       	adiw	r26, 0x02	; 2
    16f8:	2d 91       	ld	r18, X+
    16fa:	3c 91       	ld	r19, X
    16fc:	13 97       	sbiw	r26, 0x03	; 3
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	82 17       	cp	r24, r18
    1704:	93 07       	cpc	r25, r19
    1706:	94 f0       	brlt	.+36     	; 0x172c <__fpcmp_parts_f+0x88>
    1708:	28 17       	cp	r18, r24
    170a:	39 07       	cpc	r19, r25
    170c:	bc f0       	brlt	.+46     	; 0x173c <__fpcmp_parts_f+0x98>
    170e:	14 96       	adiw	r26, 0x04	; 4
    1710:	8d 91       	ld	r24, X+
    1712:	9d 91       	ld	r25, X+
    1714:	0d 90       	ld	r0, X+
    1716:	bc 91       	ld	r27, X
    1718:	a0 2d       	mov	r26, r0
    171a:	24 81       	ldd	r18, Z+4	; 0x04
    171c:	35 81       	ldd	r19, Z+5	; 0x05
    171e:	46 81       	ldd	r20, Z+6	; 0x06
    1720:	57 81       	ldd	r21, Z+7	; 0x07
    1722:	28 17       	cp	r18, r24
    1724:	39 07       	cpc	r19, r25
    1726:	4a 07       	cpc	r20, r26
    1728:	5b 07       	cpc	r21, r27
    172a:	18 f4       	brcc	.+6      	; 0x1732 <__fpcmp_parts_f+0x8e>
    172c:	11 23       	and	r17, r17
    172e:	41 f0       	breq	.+16     	; 0x1740 <__fpcmp_parts_f+0x9c>
    1730:	0a c0       	rjmp	.+20     	; 0x1746 <__fpcmp_parts_f+0xa2>
    1732:	82 17       	cp	r24, r18
    1734:	93 07       	cpc	r25, r19
    1736:	a4 07       	cpc	r26, r20
    1738:	b5 07       	cpc	r27, r21
    173a:	40 f4       	brcc	.+16     	; 0x174c <__fpcmp_parts_f+0xa8>
    173c:	11 23       	and	r17, r17
    173e:	19 f0       	breq	.+6      	; 0x1746 <__fpcmp_parts_f+0xa2>
    1740:	61 e0       	ldi	r22, 0x01	; 1
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	05 c0       	rjmp	.+10     	; 0x1750 <__fpcmp_parts_f+0xac>
    1746:	6f ef       	ldi	r22, 0xFF	; 255
    1748:	7f ef       	ldi	r23, 0xFF	; 255
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <__fpcmp_parts_f+0xac>
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	cb 01       	movw	r24, r22
    1752:	1f 91       	pop	r17
    1754:	08 95       	ret

00001756 <__udivmodsi4>:
    1756:	a1 e2       	ldi	r26, 0x21	; 33
    1758:	1a 2e       	mov	r1, r26
    175a:	aa 1b       	sub	r26, r26
    175c:	bb 1b       	sub	r27, r27
    175e:	fd 01       	movw	r30, r26
    1760:	0d c0       	rjmp	.+26     	; 0x177c <__udivmodsi4_ep>

00001762 <__udivmodsi4_loop>:
    1762:	aa 1f       	adc	r26, r26
    1764:	bb 1f       	adc	r27, r27
    1766:	ee 1f       	adc	r30, r30
    1768:	ff 1f       	adc	r31, r31
    176a:	a2 17       	cp	r26, r18
    176c:	b3 07       	cpc	r27, r19
    176e:	e4 07       	cpc	r30, r20
    1770:	f5 07       	cpc	r31, r21
    1772:	20 f0       	brcs	.+8      	; 0x177c <__udivmodsi4_ep>
    1774:	a2 1b       	sub	r26, r18
    1776:	b3 0b       	sbc	r27, r19
    1778:	e4 0b       	sbc	r30, r20
    177a:	f5 0b       	sbc	r31, r21

0000177c <__udivmodsi4_ep>:
    177c:	66 1f       	adc	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	88 1f       	adc	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	1a 94       	dec	r1
    1786:	69 f7       	brne	.-38     	; 0x1762 <__udivmodsi4_loop>
    1788:	60 95       	com	r22
    178a:	70 95       	com	r23
    178c:	80 95       	com	r24
    178e:	90 95       	com	r25
    1790:	9b 01       	movw	r18, r22
    1792:	ac 01       	movw	r20, r24
    1794:	bd 01       	movw	r22, r26
    1796:	cf 01       	movw	r24, r30
    1798:	08 95       	ret

0000179a <__prologue_saves__>:
    179a:	2f 92       	push	r2
    179c:	3f 92       	push	r3
    179e:	4f 92       	push	r4
    17a0:	5f 92       	push	r5
    17a2:	6f 92       	push	r6
    17a4:	7f 92       	push	r7
    17a6:	8f 92       	push	r8
    17a8:	9f 92       	push	r9
    17aa:	af 92       	push	r10
    17ac:	bf 92       	push	r11
    17ae:	cf 92       	push	r12
    17b0:	df 92       	push	r13
    17b2:	ef 92       	push	r14
    17b4:	ff 92       	push	r15
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	ca 1b       	sub	r28, r26
    17c4:	db 0b       	sbc	r29, r27
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	19 94       	eijmp

000017d2 <__epilogue_restores__>:
    17d2:	2a 88       	ldd	r2, Y+18	; 0x12
    17d4:	39 88       	ldd	r3, Y+17	; 0x11
    17d6:	48 88       	ldd	r4, Y+16	; 0x10
    17d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    17da:	6e 84       	ldd	r6, Y+14	; 0x0e
    17dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    17de:	8c 84       	ldd	r8, Y+12	; 0x0c
    17e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    17e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    17e4:	b9 84       	ldd	r11, Y+9	; 0x09
    17e6:	c8 84       	ldd	r12, Y+8	; 0x08
    17e8:	df 80       	ldd	r13, Y+7	; 0x07
    17ea:	ee 80       	ldd	r14, Y+6	; 0x06
    17ec:	fd 80       	ldd	r15, Y+5	; 0x05
    17ee:	0c 81       	ldd	r16, Y+4	; 0x04
    17f0:	1b 81       	ldd	r17, Y+3	; 0x03
    17f2:	aa 81       	ldd	r26, Y+2	; 0x02
    17f4:	b9 81       	ldd	r27, Y+1	; 0x01
    17f6:	ce 0f       	add	r28, r30
    17f8:	d1 1d       	adc	r29, r1
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	ed 01       	movw	r28, r26
    1806:	08 95       	ret

00001808 <_exit>:
    1808:	f8 94       	cli

0000180a <__stop_program>:
    180a:	ff cf       	rjmp	.-2      	; 0x180a <__stop_program>
